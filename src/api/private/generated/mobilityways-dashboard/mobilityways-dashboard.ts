/**
 * Generated by orval v6.16.0 üç∫
 * Do not edit manually.
 * Liftshare Private API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation } from '@tanstack/vue-query';
import type { UseMutationOptions, MutationFunction } from '@tanstack/vue-query';
import type { MaybeRef } from '@tanstack/vue-query/build/lib/types';
import type {
  AdminTokenCreateResponseNnmuhq,
  UnauthorizedResultPecray,
  ValidationExceptionResponseBaseDtoVtrnlzi,
  GetTokenForClientAccountHandlerRequestTthtui
} from '.././model';
import { customInstance } from '../../../axiosInstance';

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

/**
 * Used to generate an admin JWT allowing liftshare admins to login on behalf of a client. 
Token is valid for 30 min. 
Token can be refreshed using the refresh token up to 90 days after issue.
 * @summary Generate authentication token to login of behalf of client
 */
export const postClientTokenGetClientToken = (
  getTokenForClientAccountHandlerRequestTthtui: MaybeRef<GetTokenForClientAccountHandlerRequestTthtui>
) => {
  return customInstance<AdminTokenCreateResponseNnmuhq>({
    url: `/client/token/get-client-token`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: getTokenForClientAccountHandlerRequestTthtui
  });
};

export const getPostClientTokenGetClientTokenMutationOptions = <
  TError = UnauthorizedResultPecray | ValidationExceptionResponseBaseDtoVtrnlzi,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postClientTokenGetClientToken>>,
    TError,
    { data: GetTokenForClientAccountHandlerRequestTthtui },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postClientTokenGetClientToken>>,
  TError,
  { data: GetTokenForClientAccountHandlerRequestTthtui },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postClientTokenGetClientToken>>,
    { data: GetTokenForClientAccountHandlerRequestTthtui }
  > = (props) => {
    const { data } = props ?? {};

    return postClientTokenGetClientToken(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostClientTokenGetClientTokenMutationResult = NonNullable<
  Awaited<ReturnType<typeof postClientTokenGetClientToken>>
>;
export type PostClientTokenGetClientTokenMutationBody =
  GetTokenForClientAccountHandlerRequestTthtui;
export type PostClientTokenGetClientTokenMutationError =
  | UnauthorizedResultPecray
  | ValidationExceptionResponseBaseDtoVtrnlzi;

/**
 * @summary Generate authentication token to login of behalf of client
 */
export const usePostClientTokenGetClientToken = <
  TError = UnauthorizedResultPecray | ValidationExceptionResponseBaseDtoVtrnlzi,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postClientTokenGetClientToken>>,
    TError,
    { data: GetTokenForClientAccountHandlerRequestTthtui },
    TContext
  >;
}) => {
  const mutationOptions = getPostClientTokenGetClientTokenMutationOptions(options);

  return useMutation(mutationOptions);
};
