/**
 * Generated by orval v6.16.0 üç∫
 * Do not edit manually.
 * Liftshare Private API
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from '@tanstack/vue-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  QueryKey,
  UseQueryReturnType
} from '@tanstack/vue-query';
import type { MaybeRef } from '@tanstack/vue-query/build/lib/types';
import type {
  CommunityOptionsHandlerCommunityOptionsResponseDtoTbbwxi,
  CommunityFindByNameResponseGsuvy,
  ValidationExceptionResponseBaseDtoVtrnlzi,
  CommunityFindByNameBaseRequestQbmaui,
  CommunityDetailsRequestDtoTgugsq
} from '.././model';
import { customInstance } from '../../../axiosInstance';

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

/**
 * @summary Get a key value list of all community options for current user
 */
export const getCommunityOptions = (signal?: AbortSignal) => {
  return customInstance<CommunityOptionsHandlerCommunityOptionsResponseDtoTbbwxi>({
    url: `/community/options`,
    method: 'get',
    signal
  });
};

export const getGetCommunityOptionsQueryKey = () => ['community', 'options'] as const;

export const getGetCommunityOptionsQueryOptions = <
  TData = Awaited<ReturnType<typeof getCommunityOptions>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getCommunityOptions>>, TError, TData>;
}): UseQueryOptions<Awaited<ReturnType<typeof getCommunityOptions>>, TError, TData> => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getGetCommunityOptionsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCommunityOptions>>> = ({ signal }) =>
    getCommunityOptions(signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type GetCommunityOptionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCommunityOptions>>
>;
export type GetCommunityOptionsQueryError = unknown;

/**
 * @summary Get a key value list of all community options for current user
 */
export const useGetCommunityOptions = <
  TData = Awaited<ReturnType<typeof getCommunityOptions>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getCommunityOptions>>, TError, TData>;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetCommunityOptionsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey as QueryKey;

  return query;
};

/**
 * @summary Find community by name or part of
 */
export const postCommunityFindByName = (
  communityFindByNameBaseRequestQbmaui: MaybeRef<CommunityFindByNameBaseRequestQbmaui>
) => {
  return customInstance<CommunityFindByNameResponseGsuvy>({
    url: `/community/find/by-name`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: communityFindByNameBaseRequestQbmaui
  });
};

export const getPostCommunityFindByNameMutationOptions = <
  TError = ValidationExceptionResponseBaseDtoVtrnlzi,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCommunityFindByName>>,
    TError,
    { data: CommunityFindByNameBaseRequestQbmaui },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postCommunityFindByName>>,
  TError,
  { data: CommunityFindByNameBaseRequestQbmaui },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postCommunityFindByName>>,
    { data: CommunityFindByNameBaseRequestQbmaui }
  > = (props) => {
    const { data } = props ?? {};

    return postCommunityFindByName(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostCommunityFindByNameMutationResult = NonNullable<
  Awaited<ReturnType<typeof postCommunityFindByName>>
>;
export type PostCommunityFindByNameMutationBody = CommunityFindByNameBaseRequestQbmaui;
export type PostCommunityFindByNameMutationError = ValidationExceptionResponseBaseDtoVtrnlzi;

/**
 * @summary Find community by name or part of
 */
export const usePostCommunityFindByName = <
  TError = ValidationExceptionResponseBaseDtoVtrnlzi,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCommunityFindByName>>,
    TError,
    { data: CommunityFindByNameBaseRequestQbmaui },
    TContext
  >;
}) => {
  const mutationOptions = getPostCommunityFindByNameMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Find community by public id and get public information and options
 */
export const postCommunityDetails = (
  communityDetailsRequestDtoTgugsq: MaybeRef<CommunityDetailsRequestDtoTgugsq>
) => {
  return customInstance<CommunityFindByNameResponseGsuvy>({
    url: `/community/details`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: communityDetailsRequestDtoTgugsq
  });
};

export const getPostCommunityDetailsMutationOptions = <
  TError = ValidationExceptionResponseBaseDtoVtrnlzi,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCommunityDetails>>,
    TError,
    { data: CommunityDetailsRequestDtoTgugsq },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postCommunityDetails>>,
  TError,
  { data: CommunityDetailsRequestDtoTgugsq },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postCommunityDetails>>,
    { data: CommunityDetailsRequestDtoTgugsq }
  > = (props) => {
    const { data } = props ?? {};

    return postCommunityDetails(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostCommunityDetailsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postCommunityDetails>>
>;
export type PostCommunityDetailsMutationBody = CommunityDetailsRequestDtoTgugsq;
export type PostCommunityDetailsMutationError = ValidationExceptionResponseBaseDtoVtrnlzi;

/**
 * @summary Find community by public id and get public information and options
 */
export const usePostCommunityDetails = <
  TError = ValidationExceptionResponseBaseDtoVtrnlzi,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCommunityDetails>>,
    TError,
    { data: CommunityDetailsRequestDtoTgugsq },
    TContext
  >;
}) => {
  const mutationOptions = getPostCommunityDetailsMutationOptions(options);

  return useMutation(mutationOptions);
};
