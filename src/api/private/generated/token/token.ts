/**
 * Generated by orval v6.16.0 üç∫
 * Do not edit manually.
 * Liftshare Private API
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from '@tanstack/vue-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  QueryKey,
  UseQueryReturnType
} from '@tanstack/vue-query'
import type { MaybeRef } from '@tanstack/vue-query/build/lib/types'
import type {
  TokenCreateResponseEbhzqy,
  UnauthorizedResultPecray,
  ValidationExceptionResponseDtoLtlwwzy,
  TokenCreateRequestHakhvwy,
  GetToken200One,
  GetToken200Two,
  GetToken200Three,
  CreateTokenFacebookResponseDtoRzdixzy,
  CreateTokenFacebookRequestDtoYsyoki,
  CreateTokenAppleResponseDtoSrywq,
  CreateTokenAppleRequestDtoGscvby
} from '.././model'
import { customInstance } from '../../../axiosInstance'

type AwaitedInput<T> = PromiseLike<T> | T

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never

/**
 * @summary Main way of authenticating and generating a JWT
 */
export const postToken = (tokenCreateRequestHakhvwy: MaybeRef<TokenCreateRequestHakhvwy>) => {
  return customInstance<TokenCreateResponseEbhzqy>({
    url: `/token`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: tokenCreateRequestHakhvwy
  })
}

export const getPostTokenMutationOptions = <
  TError = UnauthorizedResultPecray | ValidationExceptionResponseDtoLtlwwzy,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postToken>>,
    TError,
    { data: TokenCreateRequestHakhvwy },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postToken>>,
  TError,
  { data: TokenCreateRequestHakhvwy },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postToken>>,
    { data: TokenCreateRequestHakhvwy }
  > = (props) => {
    const { data } = props ?? {}

    return postToken(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostTokenMutationResult = NonNullable<Awaited<ReturnType<typeof postToken>>>
export type PostTokenMutationBody = TokenCreateRequestHakhvwy
export type PostTokenMutationError =
  | UnauthorizedResultPecray
  | ValidationExceptionResponseDtoLtlwwzy

/**
 * @summary Main way of authenticating and generating a JWT
 */
export const usePostToken = <
  TError = UnauthorizedResultPecray | ValidationExceptionResponseDtoLtlwwzy,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postToken>>,
    TError,
    { data: TokenCreateRequestHakhvwy },
    TContext
  >
}) => {
  const mutationOptions = getPostTokenMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary Used to test and validate a JWT
 */
export const getToken = (signal?: AbortSignal) => {
  return customInstance<GetToken200One | GetToken200Two | GetToken200Three>({
    url: `/token`,
    method: 'get',
    signal
  })
}

export const getGetTokenQueryKey = () => ['token'] as const

export const getGetTokenQueryOptions = <
  TData = Awaited<ReturnType<typeof getToken>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getToken>>, TError, TData>
}): UseQueryOptions<Awaited<ReturnType<typeof getToken>>, TError, TData> => {
  const { query: queryOptions } = options ?? {}

  const queryKey = getGetTokenQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getToken>>> = ({ signal }) =>
    getToken(signal)

  return { queryKey, queryFn, ...queryOptions }
}

export type GetTokenQueryResult = NonNullable<Awaited<ReturnType<typeof getToken>>>
export type GetTokenQueryError = unknown

/**
 * @summary Used to test and validate a JWT
 */
export const useGetToken = <
  TData = Awaited<ReturnType<typeof getToken>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getToken>>, TError, TData>
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetTokenQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey as QueryKey

  return query
}

/**
 * @summary Used to authenticate using a Facebook access token and generate a JWT. User must have previously created an account by signing in to Facebook on Liftshare.com
 */
export const postTokenFacebook = (
  createTokenFacebookRequestDtoYsyoki: MaybeRef<CreateTokenFacebookRequestDtoYsyoki>
) => {
  return customInstance<CreateTokenFacebookResponseDtoRzdixzy>({
    url: `/token/facebook`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: createTokenFacebookRequestDtoYsyoki
  })
}

export const getPostTokenFacebookMutationOptions = <
  TError = UnauthorizedResultPecray | ValidationExceptionResponseDtoLtlwwzy,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postTokenFacebook>>,
    TError,
    { data: CreateTokenFacebookRequestDtoYsyoki },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postTokenFacebook>>,
  TError,
  { data: CreateTokenFacebookRequestDtoYsyoki },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postTokenFacebook>>,
    { data: CreateTokenFacebookRequestDtoYsyoki }
  > = (props) => {
    const { data } = props ?? {}

    return postTokenFacebook(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostTokenFacebookMutationResult = NonNullable<
  Awaited<ReturnType<typeof postTokenFacebook>>
>
export type PostTokenFacebookMutationBody = CreateTokenFacebookRequestDtoYsyoki
export type PostTokenFacebookMutationError =
  | UnauthorizedResultPecray
  | ValidationExceptionResponseDtoLtlwwzy

/**
 * @summary Used to authenticate using a Facebook access token and generate a JWT. User must have previously created an account by signing in to Facebook on Liftshare.com
 */
export const usePostTokenFacebook = <
  TError = UnauthorizedResultPecray | ValidationExceptionResponseDtoLtlwwzy,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postTokenFacebook>>,
    TError,
    { data: CreateTokenFacebookRequestDtoYsyoki },
    TContext
  >
}) => {
  const mutationOptions = getPostTokenFacebookMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary Used to authenticate using an Apple access token and generate a JWT. User must have previously created a Liftshare.com account with the same email registered with Apple
 */
export const postTokenApple = (
  createTokenAppleRequestDtoGscvby: MaybeRef<CreateTokenAppleRequestDtoGscvby>
) => {
  return customInstance<CreateTokenAppleResponseDtoSrywq>({
    url: `/token/apple`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: createTokenAppleRequestDtoGscvby
  })
}

export const getPostTokenAppleMutationOptions = <
  TError = UnauthorizedResultPecray | ValidationExceptionResponseDtoLtlwwzy,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postTokenApple>>,
    TError,
    { data: CreateTokenAppleRequestDtoGscvby },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postTokenApple>>,
  TError,
  { data: CreateTokenAppleRequestDtoGscvby },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postTokenApple>>,
    { data: CreateTokenAppleRequestDtoGscvby }
  > = (props) => {
    const { data } = props ?? {}

    return postTokenApple(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostTokenAppleMutationResult = NonNullable<Awaited<ReturnType<typeof postTokenApple>>>
export type PostTokenAppleMutationBody = CreateTokenAppleRequestDtoGscvby
export type PostTokenAppleMutationError =
  | UnauthorizedResultPecray
  | ValidationExceptionResponseDtoLtlwwzy

/**
 * @summary Used to authenticate using an Apple access token and generate a JWT. User must have previously created a Liftshare.com account with the same email registered with Apple
 */
export const usePostTokenApple = <
  TError = UnauthorizedResultPecray | ValidationExceptionResponseDtoLtlwwzy,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postTokenApple>>,
    TError,
    { data: CreateTokenAppleRequestDtoGscvby },
    TContext
  >
}) => {
  const mutationOptions = getPostTokenAppleMutationOptions(options)

  return useMutation(mutationOptions)
}
