/**
 * Generated by orval v6.16.0 üç∫
 * Do not edit manually.
 * Liftshare Private API
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from '@tanstack/vue-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  QueryKey,
  UseQueryReturnType
} from '@tanstack/vue-query'
import { unref } from 'vue'
import type { MaybeRef } from '@tanstack/vue-query/build/lib/types'
import type {
  CreateDashboardUserRequestEvlhlxy,
  FindDashboardUsersRequestYenidi,
  UpdateDashboardUserRolesRequestBaseUfqlua,
  GetDashboardAdminLoginsParams
} from '.././model'
import { customInstance } from '../../../axiosInstance'

type AwaitedInput<T> = PromiseLike<T> | T

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never

/**
 * @summary Create a new dashboard user with roles
 */
export const postDashboardAdminUser = (
  createDashboardUserRequestEvlhlxy: MaybeRef<CreateDashboardUserRequestEvlhlxy>
) => {
  return customInstance<void>({
    url: `/dashboard/admin/user`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: createDashboardUserRequestEvlhlxy
  })
}

export const getPostDashboardAdminUserMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postDashboardAdminUser>>,
    TError,
    { data: CreateDashboardUserRequestEvlhlxy },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postDashboardAdminUser>>,
  TError,
  { data: CreateDashboardUserRequestEvlhlxy },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postDashboardAdminUser>>,
    { data: CreateDashboardUserRequestEvlhlxy }
  > = (props) => {
    const { data } = props ?? {}

    return postDashboardAdminUser(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostDashboardAdminUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof postDashboardAdminUser>>
>
export type PostDashboardAdminUserMutationBody = CreateDashboardUserRequestEvlhlxy
export type PostDashboardAdminUserMutationError = unknown

/**
 * @summary Create a new dashboard user with roles
 */
export const usePostDashboardAdminUser = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postDashboardAdminUser>>,
    TError,
    { data: CreateDashboardUserRequestEvlhlxy },
    TContext
  >
}) => {
  const mutationOptions = getPostDashboardAdminUserMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary Full details about a dashboard user
 */
export const getDashboardAdminUserUserId = (userId: MaybeRef<string>, signal?: AbortSignal) => {
  return customInstance<void>({
    url: `/dashboard/admin/user/${unref(userId)}`,
    method: 'get',
    signal
  })
}

export const getGetDashboardAdminUserUserIdQueryKey = (userId: MaybeRef<string>) =>
  ['dashboard', 'admin', 'user', userId] as const

export const getGetDashboardAdminUserUserIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getDashboardAdminUserUserId>>,
  TError = unknown
>(
  userId: MaybeRef<string>,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getDashboardAdminUserUserId>>, TError, TData>
  }
): UseQueryOptions<Awaited<ReturnType<typeof getDashboardAdminUserUserId>>, TError, TData> => {
  const { query: queryOptions } = options ?? {}

  const queryKey = getGetDashboardAdminUserUserIdQueryKey(userId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getDashboardAdminUserUserId>>> = ({
    signal
  }) => getDashboardAdminUserUserId(userId, signal)

  return { queryKey, queryFn, enabled: !!userId, ...queryOptions }
}

export type GetDashboardAdminUserUserIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDashboardAdminUserUserId>>
>
export type GetDashboardAdminUserUserIdQueryError = unknown

/**
 * @summary Full details about a dashboard user
 */
export const useGetDashboardAdminUserUserId = <
  TData = Awaited<ReturnType<typeof getDashboardAdminUserUserId>>,
  TError = unknown
>(
  userId: MaybeRef<string>,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getDashboardAdminUserUserId>>, TError, TData>
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDashboardAdminUserUserIdQueryOptions(userId, options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey as QueryKey

  return query
}

/**
 * @summary Send a welcome email to the dashboard user
 */
export const postDashboardAdminUserUserIdSendWelcomeEmail = (userId: MaybeRef<string>) => {
  return customInstance<void>({
    url: `/dashboard/admin/user/${unref(userId)}/send-welcome-email`,
    method: 'post'
  })
}

export const getPostDashboardAdminUserUserIdSendWelcomeEmailMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postDashboardAdminUserUserIdSendWelcomeEmail>>,
    TError,
    { userId: string },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postDashboardAdminUserUserIdSendWelcomeEmail>>,
  TError,
  { userId: string },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postDashboardAdminUserUserIdSendWelcomeEmail>>,
    { userId: string }
  > = (props) => {
    const { userId } = props ?? {}

    return postDashboardAdminUserUserIdSendWelcomeEmail(userId)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostDashboardAdminUserUserIdSendWelcomeEmailMutationResult = NonNullable<
  Awaited<ReturnType<typeof postDashboardAdminUserUserIdSendWelcomeEmail>>
>

export type PostDashboardAdminUserUserIdSendWelcomeEmailMutationError = unknown

/**
 * @summary Send a welcome email to the dashboard user
 */
export const usePostDashboardAdminUserUserIdSendWelcomeEmail = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postDashboardAdminUserUserIdSendWelcomeEmail>>,
    TError,
    { userId: string },
    TContext
  >
}) => {
  const mutationOptions = getPostDashboardAdminUserUserIdSendWelcomeEmailMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary Find dashboard users by name, surname, email, id, encrypted id, or hashed id
 */
export const postDashboardAdminUserSearch = (
  findDashboardUsersRequestYenidi: MaybeRef<FindDashboardUsersRequestYenidi>
) => {
  return customInstance<void>({
    url: `/dashboard/admin/user/search`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: findDashboardUsersRequestYenidi
  })
}

export const getPostDashboardAdminUserSearchMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postDashboardAdminUserSearch>>,
    TError,
    { data: FindDashboardUsersRequestYenidi },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postDashboardAdminUserSearch>>,
  TError,
  { data: FindDashboardUsersRequestYenidi },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postDashboardAdminUserSearch>>,
    { data: FindDashboardUsersRequestYenidi }
  > = (props) => {
    const { data } = props ?? {}

    return postDashboardAdminUserSearch(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostDashboardAdminUserSearchMutationResult = NonNullable<
  Awaited<ReturnType<typeof postDashboardAdminUserSearch>>
>
export type PostDashboardAdminUserSearchMutationBody = FindDashboardUsersRequestYenidi
export type PostDashboardAdminUserSearchMutationError = unknown

/**
 * @summary Find dashboard users by name, surname, email, id, encrypted id, or hashed id
 */
export const usePostDashboardAdminUserSearch = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postDashboardAdminUserSearch>>,
    TError,
    { data: FindDashboardUsersRequestYenidi },
    TContext
  >
}) => {
  const mutationOptions = getPostDashboardAdminUserSearchMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary Summary of users and their roles with access to the community
 */
export const getDashboardAdminCommunityCommunityIdUsers = (
  communityId: MaybeRef<string>,
  signal?: AbortSignal
) => {
  return customInstance<void>({
    url: `/dashboard/admin/community/${unref(communityId)}/users`,
    method: 'get',
    signal
  })
}

export const getGetDashboardAdminCommunityCommunityIdUsersQueryKey = (
  communityId: MaybeRef<string>
) => ['dashboard', 'admin', 'community', communityId, 'users'] as const

export const getGetDashboardAdminCommunityCommunityIdUsersQueryOptions = <
  TData = Awaited<ReturnType<typeof getDashboardAdminCommunityCommunityIdUsers>>,
  TError = unknown
>(
  communityId: MaybeRef<string>,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDashboardAdminCommunityCommunityIdUsers>>,
      TError,
      TData
    >
  }
): UseQueryOptions<
  Awaited<ReturnType<typeof getDashboardAdminCommunityCommunityIdUsers>>,
  TError,
  TData
> => {
  const { query: queryOptions } = options ?? {}

  const queryKey = getGetDashboardAdminCommunityCommunityIdUsersQueryKey(communityId)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDashboardAdminCommunityCommunityIdUsers>>
  > = ({ signal }) => getDashboardAdminCommunityCommunityIdUsers(communityId, signal)

  return { queryKey, queryFn, enabled: !!communityId, ...queryOptions }
}

export type GetDashboardAdminCommunityCommunityIdUsersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDashboardAdminCommunityCommunityIdUsers>>
>
export type GetDashboardAdminCommunityCommunityIdUsersQueryError = unknown

/**
 * @summary Summary of users and their roles with access to the community
 */
export const useGetDashboardAdminCommunityCommunityIdUsers = <
  TData = Awaited<ReturnType<typeof getDashboardAdminCommunityCommunityIdUsers>>,
  TError = unknown
>(
  communityId: MaybeRef<string>,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDashboardAdminCommunityCommunityIdUsers>>,
      TError,
      TData
    >
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDashboardAdminCommunityCommunityIdUsersQueryOptions(
    communityId,
    options
  )

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey as QueryKey

  return query
}

/**
 * @summary Updates all roles for this dashboard user for this community. Adds missing roles, deletes roles not posted.
 */
export const postDashboardAdminCommunityCommunityIdUsersRoles = (
  communityId: MaybeRef<string>,
  updateDashboardUserRolesRequestBaseUfqlua: MaybeRef<UpdateDashboardUserRolesRequestBaseUfqlua>
) => {
  return customInstance<void>({
    url: `/dashboard/admin/community/${unref(communityId)}/users/roles`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: updateDashboardUserRolesRequestBaseUfqlua
  })
}

export const getPostDashboardAdminCommunityCommunityIdUsersRolesMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postDashboardAdminCommunityCommunityIdUsersRoles>>,
    TError,
    { communityId: string; data: UpdateDashboardUserRolesRequestBaseUfqlua },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postDashboardAdminCommunityCommunityIdUsersRoles>>,
  TError,
  { communityId: string; data: UpdateDashboardUserRolesRequestBaseUfqlua },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postDashboardAdminCommunityCommunityIdUsersRoles>>,
    { communityId: string; data: UpdateDashboardUserRolesRequestBaseUfqlua }
  > = (props) => {
    const { communityId, data } = props ?? {}

    return postDashboardAdminCommunityCommunityIdUsersRoles(communityId, data)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostDashboardAdminCommunityCommunityIdUsersRolesMutationResult = NonNullable<
  Awaited<ReturnType<typeof postDashboardAdminCommunityCommunityIdUsersRoles>>
>
export type PostDashboardAdminCommunityCommunityIdUsersRolesMutationBody =
  UpdateDashboardUserRolesRequestBaseUfqlua
export type PostDashboardAdminCommunityCommunityIdUsersRolesMutationError = unknown

/**
 * @summary Updates all roles for this dashboard user for this community. Adds missing roles, deletes roles not posted.
 */
export const usePostDashboardAdminCommunityCommunityIdUsersRoles = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postDashboardAdminCommunityCommunityIdUsersRoles>>,
    TError,
    { communityId: string; data: UpdateDashboardUserRolesRequestBaseUfqlua },
    TContext
  >
}) => {
  const mutationOptions =
    getPostDashboardAdminCommunityCommunityIdUsersRolesMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary Dashboard users who have logged in
 */
export const getDashboardAdminLogins = (
  params?: MaybeRef<GetDashboardAdminLoginsParams>,
  signal?: AbortSignal
) => {
  return customInstance<void>({ url: `/dashboard/admin/logins`, method: 'get', params, signal })
}

export const getGetDashboardAdminLoginsQueryKey = (
  params?: MaybeRef<GetDashboardAdminLoginsParams>
) => ['dashboard', 'admin', 'logins', ...(params ? [params] : [])] as const

export const getGetDashboardAdminLoginsQueryOptions = <
  TData = Awaited<ReturnType<typeof getDashboardAdminLogins>>,
  TError = unknown
>(
  params?: MaybeRef<GetDashboardAdminLoginsParams>,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getDashboardAdminLogins>>, TError, TData>
  }
): UseQueryOptions<Awaited<ReturnType<typeof getDashboardAdminLogins>>, TError, TData> => {
  const { query: queryOptions } = options ?? {}

  const queryKey = getGetDashboardAdminLoginsQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getDashboardAdminLogins>>> = ({
    signal
  }) => getDashboardAdminLogins(params, signal)

  return { queryKey, queryFn, ...queryOptions }
}

export type GetDashboardAdminLoginsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDashboardAdminLogins>>
>
export type GetDashboardAdminLoginsQueryError = unknown

/**
 * @summary Dashboard users who have logged in
 */
export const useGetDashboardAdminLogins = <
  TData = Awaited<ReturnType<typeof getDashboardAdminLogins>>,
  TError = unknown
>(
  params?: MaybeRef<GetDashboardAdminLoginsParams>,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getDashboardAdminLogins>>, TError, TData>
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDashboardAdminLoginsQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey as QueryKey

  return query
}
