/**
 * Generated by orval v6.16.0 üç∫
 * Do not edit manually.
 * Liftshare Private API
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from '@tanstack/vue-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  QueryKey,
  UseQueryReturnType
} from '@tanstack/vue-query';
import type { MaybeRef } from '@tanstack/vue-query/build/lib/types';
import type { ClearCommunityTestDataRequestBglddti } from '.././model';
import { customInstance } from '../../../axiosInstance';

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

export const getTestHbs = (signal?: AbortSignal) => {
  return customInstance<void>({ url: `/test/hbs`, method: 'get', signal });
};

export const getGetTestHbsQueryKey = () => ['test', 'hbs'] as const;

export const getGetTestHbsQueryOptions = <
  TData = Awaited<ReturnType<typeof getTestHbs>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getTestHbs>>, TError, TData>;
}): UseQueryOptions<Awaited<ReturnType<typeof getTestHbs>>, TError, TData> => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getGetTestHbsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTestHbs>>> = ({ signal }) =>
    getTestHbs(signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type GetTestHbsQueryResult = NonNullable<Awaited<ReturnType<typeof getTestHbs>>>;
export type GetTestHbsQueryError = unknown;

export const useGetTestHbs = <
  TData = Awaited<ReturnType<typeof getTestHbs>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getTestHbs>>, TError, TData>;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetTestHbsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey as QueryKey;

  return query;
};

export const getTestTemplates = (signal?: AbortSignal) => {
  return customInstance<void>({ url: `/test/templates`, method: 'get', signal });
};

export const getGetTestTemplatesQueryKey = () => ['test', 'templates'] as const;

export const getGetTestTemplatesQueryOptions = <
  TData = Awaited<ReturnType<typeof getTestTemplates>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getTestTemplates>>, TError, TData>;
}): UseQueryOptions<Awaited<ReturnType<typeof getTestTemplates>>, TError, TData> => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getGetTestTemplatesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTestTemplates>>> = ({ signal }) =>
    getTestTemplates(signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type GetTestTemplatesQueryResult = NonNullable<Awaited<ReturnType<typeof getTestTemplates>>>;
export type GetTestTemplatesQueryError = unknown;

export const useGetTestTemplates = <
  TData = Awaited<ReturnType<typeof getTestTemplates>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getTestTemplates>>, TError, TData>;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetTestTemplatesQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey as QueryKey;

  return query;
};

export const getTestFeature = (signal?: AbortSignal) => {
  return customInstance<void>({ url: `/test/feature`, method: 'get', signal });
};

export const getGetTestFeatureQueryKey = () => ['test', 'feature'] as const;

export const getGetTestFeatureQueryOptions = <
  TData = Awaited<ReturnType<typeof getTestFeature>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getTestFeature>>, TError, TData>;
}): UseQueryOptions<Awaited<ReturnType<typeof getTestFeature>>, TError, TData> => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getGetTestFeatureQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTestFeature>>> = ({ signal }) =>
    getTestFeature(signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type GetTestFeatureQueryResult = NonNullable<Awaited<ReturnType<typeof getTestFeature>>>;
export type GetTestFeatureQueryError = unknown;

export const useGetTestFeature = <
  TData = Awaited<ReturnType<typeof getTestFeature>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getTestFeature>>, TError, TData>;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetTestFeatureQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey as QueryKey;

  return query;
};

export const getTestOverview = (signal?: AbortSignal) => {
  return customInstance<void>({ url: `/test/overview`, method: 'get', signal });
};

export const getGetTestOverviewQueryKey = () => ['test', 'overview'] as const;

export const getGetTestOverviewQueryOptions = <
  TData = Awaited<ReturnType<typeof getTestOverview>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getTestOverview>>, TError, TData>;
}): UseQueryOptions<Awaited<ReturnType<typeof getTestOverview>>, TError, TData> => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getGetTestOverviewQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTestOverview>>> = ({ signal }) =>
    getTestOverview(signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type GetTestOverviewQueryResult = NonNullable<Awaited<ReturnType<typeof getTestOverview>>>;
export type GetTestOverviewQueryError = unknown;

export const useGetTestOverview = <
  TData = Awaited<ReturnType<typeof getTestOverview>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getTestOverview>>, TError, TData>;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetTestOverviewQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey as QueryKey;

  return query;
};

export const postE2eTestTeardown = (
  clearCommunityTestDataRequestBglddti: MaybeRef<ClearCommunityTestDataRequestBglddti>
) => {
  return customInstance<void>({
    url: `/e2e-test/teardown`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: clearCommunityTestDataRequestBglddti
  });
};

export const getPostE2eTestTeardownMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postE2eTestTeardown>>,
    TError,
    { data: ClearCommunityTestDataRequestBglddti },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postE2eTestTeardown>>,
  TError,
  { data: ClearCommunityTestDataRequestBglddti },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postE2eTestTeardown>>,
    { data: ClearCommunityTestDataRequestBglddti }
  > = (props) => {
    const { data } = props ?? {};

    return postE2eTestTeardown(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostE2eTestTeardownMutationResult = NonNullable<
  Awaited<ReturnType<typeof postE2eTestTeardown>>
>;
export type PostE2eTestTeardownMutationBody = ClearCommunityTestDataRequestBglddti;
export type PostE2eTestTeardownMutationError = unknown;

export const usePostE2eTestTeardown = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postE2eTestTeardown>>,
    TError,
    { data: ClearCommunityTestDataRequestBglddti },
    TContext
  >;
}) => {
  const mutationOptions = getPostE2eTestTeardownMutationOptions(options);

  return useMutation(mutationOptions);
};
