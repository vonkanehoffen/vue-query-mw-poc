/**
 * Generated by orval v6.16.0 üç∫
 * Do not edit manually.
 * Liftshare Private API
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from '@tanstack/vue-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  QueryKey,
  UseQueryReturnType
} from '@tanstack/vue-query'
import { unref } from 'vue'
import type { MaybeRef } from '@tanstack/vue-query/build/lib/types'
import type {
  AuthenticateTripDriverResponseDtoWmhqyy,
  ValidationExceptionResponseDtoLtlwwzy,
  AuthenticateTripDriverRequestBaseDtoEluguhi,
  AuthenticateTripPassengerBaseResponseDtoUcnkima,
  AuthenticateTripPassengerRequestBaseDtoPoxnzaq,
  AuthenticatedTripsResponseDtoYptpiy
} from '.././model'
import { customInstance } from '../../../axiosInstance'

type AwaitedInput<T> = PromiseLike<T> | T

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never

/**
 * @summary Returns new qr code for driver to display to passenger
 */
export const postAuthenticateTripDriver = (
  authenticateTripDriverRequestBaseDtoEluguhi: MaybeRef<AuthenticateTripDriverRequestBaseDtoEluguhi>
) => {
  return customInstance<AuthenticateTripDriverResponseDtoWmhqyy>({
    url: `/authenticate-trip/driver`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: authenticateTripDriverRequestBaseDtoEluguhi
  })
}

export const getPostAuthenticateTripDriverMutationOptions = <
  TError = ValidationExceptionResponseDtoLtlwwzy,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAuthenticateTripDriver>>,
    TError,
    { data: AuthenticateTripDriverRequestBaseDtoEluguhi },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postAuthenticateTripDriver>>,
  TError,
  { data: AuthenticateTripDriverRequestBaseDtoEluguhi },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postAuthenticateTripDriver>>,
    { data: AuthenticateTripDriverRequestBaseDtoEluguhi }
  > = (props) => {
    const { data } = props ?? {}

    return postAuthenticateTripDriver(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostAuthenticateTripDriverMutationResult = NonNullable<
  Awaited<ReturnType<typeof postAuthenticateTripDriver>>
>
export type PostAuthenticateTripDriverMutationBody = AuthenticateTripDriverRequestBaseDtoEluguhi
export type PostAuthenticateTripDriverMutationError = ValidationExceptionResponseDtoLtlwwzy

/**
 * @summary Returns new qr code for driver to display to passenger
 */
export const usePostAuthenticateTripDriver = <
  TError = ValidationExceptionResponseDtoLtlwwzy,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAuthenticateTripDriver>>,
    TError,
    { data: AuthenticateTripDriverRequestBaseDtoEluguhi },
    TContext
  >
}) => {
  const mutationOptions = getPostAuthenticateTripDriverMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary Validates passenger and authenticates trip
 */
export const postAuthenticateTripPassenger = (
  authenticateTripPassengerRequestBaseDtoPoxnzaq: MaybeRef<AuthenticateTripPassengerRequestBaseDtoPoxnzaq>
) => {
  return customInstance<AuthenticateTripPassengerBaseResponseDtoUcnkima>({
    url: `/authenticate-trip/passenger`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: authenticateTripPassengerRequestBaseDtoPoxnzaq
  })
}

export const getPostAuthenticateTripPassengerMutationOptions = <
  TError = ValidationExceptionResponseDtoLtlwwzy,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAuthenticateTripPassenger>>,
    TError,
    { data: AuthenticateTripPassengerRequestBaseDtoPoxnzaq },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postAuthenticateTripPassenger>>,
  TError,
  { data: AuthenticateTripPassengerRequestBaseDtoPoxnzaq },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postAuthenticateTripPassenger>>,
    { data: AuthenticateTripPassengerRequestBaseDtoPoxnzaq }
  > = (props) => {
    const { data } = props ?? {}

    return postAuthenticateTripPassenger(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostAuthenticateTripPassengerMutationResult = NonNullable<
  Awaited<ReturnType<typeof postAuthenticateTripPassenger>>
>
export type PostAuthenticateTripPassengerMutationBody =
  AuthenticateTripPassengerRequestBaseDtoPoxnzaq
export type PostAuthenticateTripPassengerMutationError = ValidationExceptionResponseDtoLtlwwzy

/**
 * @summary Validates passenger and authenticates trip
 */
export const usePostAuthenticateTripPassenger = <
  TError = ValidationExceptionResponseDtoLtlwwzy,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAuthenticateTripPassenger>>,
    TError,
    { data: AuthenticateTripPassengerRequestBaseDtoPoxnzaq },
    TContext
  >
}) => {
  const mutationOptions = getPostAuthenticateTripPassengerMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary Gets the status and details of an authenticated trip
 */
export const getAuthenticateTripStatusToken = (token: MaybeRef<string>, signal?: AbortSignal) => {
  return customInstance<AuthenticateTripPassengerBaseResponseDtoUcnkima>({
    url: `/authenticate-trip/status/${unref(token)}`,
    method: 'get',
    signal
  })
}

export const getGetAuthenticateTripStatusTokenQueryKey = (token: MaybeRef<string>) =>
  ['authenticate-trip', 'status', token] as const

export const getGetAuthenticateTripStatusTokenQueryOptions = <
  TData = Awaited<ReturnType<typeof getAuthenticateTripStatusToken>>,
  TError = ValidationExceptionResponseDtoLtlwwzy
>(
  token: MaybeRef<string>,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getAuthenticateTripStatusToken>>,
      TError,
      TData
    >
  }
): UseQueryOptions<Awaited<ReturnType<typeof getAuthenticateTripStatusToken>>, TError, TData> => {
  const { query: queryOptions } = options ?? {}

  const queryKey = getGetAuthenticateTripStatusTokenQueryKey(token)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAuthenticateTripStatusToken>>> = ({
    signal
  }) => getAuthenticateTripStatusToken(token, signal)

  return { queryKey, queryFn, enabled: !!token, ...queryOptions }
}

export type GetAuthenticateTripStatusTokenQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAuthenticateTripStatusToken>>
>
export type GetAuthenticateTripStatusTokenQueryError = ValidationExceptionResponseDtoLtlwwzy

/**
 * @summary Gets the status and details of an authenticated trip
 */
export const useGetAuthenticateTripStatusToken = <
  TData = Awaited<ReturnType<typeof getAuthenticateTripStatusToken>>,
  TError = ValidationExceptionResponseDtoLtlwwzy
>(
  token: MaybeRef<string>,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getAuthenticateTripStatusToken>>,
      TError,
      TData
    >
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetAuthenticateTripStatusTokenQueryOptions(token, options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey as QueryKey

  return query
}

/**
 * @summary Get list of authenticated trips. Note name may be null if member has been deleted
 */
export const getAuthenticateTripTrips = (signal?: AbortSignal) => {
  return customInstance<AuthenticatedTripsResponseDtoYptpiy>({
    url: `/authenticate-trip/trips`,
    method: 'get',
    signal
  })
}

export const getGetAuthenticateTripTripsQueryKey = () => ['authenticate-trip', 'trips'] as const

export const getGetAuthenticateTripTripsQueryOptions = <
  TData = Awaited<ReturnType<typeof getAuthenticateTripTrips>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getAuthenticateTripTrips>>, TError, TData>
}): UseQueryOptions<Awaited<ReturnType<typeof getAuthenticateTripTrips>>, TError, TData> => {
  const { query: queryOptions } = options ?? {}

  const queryKey = getGetAuthenticateTripTripsQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAuthenticateTripTrips>>> = ({
    signal
  }) => getAuthenticateTripTrips(signal)

  return { queryKey, queryFn, ...queryOptions }
}

export type GetAuthenticateTripTripsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAuthenticateTripTrips>>
>
export type GetAuthenticateTripTripsQueryError = unknown

/**
 * @summary Get list of authenticated trips. Note name may be null if member has been deleted
 */
export const useGetAuthenticateTripTrips = <
  TData = Awaited<ReturnType<typeof getAuthenticateTripTrips>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getAuthenticateTripTrips>>, TError, TData>
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetAuthenticateTripTripsQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey as QueryKey

  return query
}
