/**
 * Generated by orval v6.16.0 üç∫
 * Do not edit manually.
 * Liftshare Private API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation } from '@tanstack/vue-query';
import type { UseMutationOptions, MutationFunction } from '@tanstack/vue-query';
import type { MaybeRef } from '@tanstack/vue-query/build/lib/types';
import type {
  ApiRegisterResponseDtoMofvoq,
  ValidationExceptionResponseDtoLtlwwzy,
  ApiRegisterRequestDtoHtjva
} from '.././model';
import { customInstance } from '../../../axiosInstance';

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

/**
 * @summary Generates a password reset code and sends it to the user via email
 */
export const postRegister = (apiRegisterRequestDtoHtjva: MaybeRef<ApiRegisterRequestDtoHtjva>) => {
  return customInstance<ApiRegisterResponseDtoMofvoq>({
    url: `/register`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: apiRegisterRequestDtoHtjva
  });
};

export const getPostRegisterMutationOptions = <
  TError = ValidationExceptionResponseDtoLtlwwzy,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postRegister>>,
    TError,
    { data: ApiRegisterRequestDtoHtjva },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postRegister>>,
  TError,
  { data: ApiRegisterRequestDtoHtjva },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postRegister>>,
    { data: ApiRegisterRequestDtoHtjva }
  > = (props) => {
    const { data } = props ?? {};

    return postRegister(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostRegisterMutationResult = NonNullable<Awaited<ReturnType<typeof postRegister>>>;
export type PostRegisterMutationBody = ApiRegisterRequestDtoHtjva;
export type PostRegisterMutationError = ValidationExceptionResponseDtoLtlwwzy;

/**
 * @summary Generates a password reset code and sends it to the user via email
 */
export const usePostRegister = <
  TError = ValidationExceptionResponseDtoLtlwwzy,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postRegister>>,
    TError,
    { data: ApiRegisterRequestDtoHtjva },
    TContext
  >;
}) => {
  const mutationOptions = getPostRegisterMutationOptions(options);

  return useMutation(mutationOptions);
};
