/**
 * Generated by orval v6.16.0 üç∫
 * Do not edit manually.
 * Liftshare Private API
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from '@tanstack/vue-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  QueryKey,
  UseQueryReturnType
} from '@tanstack/vue-query'
import { unref } from 'vue'
import type { MaybeRef } from '@tanstack/vue-query/build/lib/types'
import type {
  ConversationsResponseDtoYzawzqi,
  ConversationResponseDtoIyccxkq,
  CreateReplyResponseDtoQsizqa,
  CreateReplyRequestBaseDtoUyptry
} from '.././model'
import { customInstance } from '../../../axiosInstance'

type AwaitedInput<T> = PromiseLike<T> | T

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never

/**
 * @summary Get a list of all current conversations
 */
export const getConversation = (signal?: AbortSignal) => {
  return customInstance<ConversationsResponseDtoYzawzqi>({
    url: `/conversation`,
    method: 'get',
    signal
  })
}

export const getGetConversationQueryKey = () => ['conversation'] as const

export const getGetConversationQueryOptions = <
  TData = Awaited<ReturnType<typeof getConversation>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getConversation>>, TError, TData>
}): UseQueryOptions<Awaited<ReturnType<typeof getConversation>>, TError, TData> => {
  const { query: queryOptions } = options ?? {}

  const queryKey = getGetConversationQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getConversation>>> = ({ signal }) =>
    getConversation(signal)

  return { queryKey, queryFn, ...queryOptions }
}

export type GetConversationQueryResult = NonNullable<Awaited<ReturnType<typeof getConversation>>>
export type GetConversationQueryError = unknown

/**
 * @summary Get a list of all current conversations
 */
export const useGetConversation = <
  TData = Awaited<ReturnType<typeof getConversation>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getConversation>>, TError, TData>
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetConversationQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey as QueryKey

  return query
}

/**
 * @summary Get a list of all messages for a given conversation
 */
export const getConversationConversationId = (
  conversationId: MaybeRef<string>,
  signal?: AbortSignal
) => {
  return customInstance<ConversationResponseDtoIyccxkq>({
    url: `/conversation/${unref(conversationId)}`,
    method: 'get',
    signal
  })
}

export const getGetConversationConversationIdQueryKey = (conversationId: MaybeRef<string>) =>
  ['conversation', conversationId] as const

export const getGetConversationConversationIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getConversationConversationId>>,
  TError = unknown
>(
  conversationId: MaybeRef<string>,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getConversationConversationId>>,
      TError,
      TData
    >
  }
): UseQueryOptions<Awaited<ReturnType<typeof getConversationConversationId>>, TError, TData> => {
  const { query: queryOptions } = options ?? {}

  const queryKey = getGetConversationConversationIdQueryKey(conversationId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getConversationConversationId>>> = ({
    signal
  }) => getConversationConversationId(conversationId, signal)

  return { queryKey, queryFn, enabled: !!conversationId, ...queryOptions }
}

export type GetConversationConversationIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getConversationConversationId>>
>
export type GetConversationConversationIdQueryError = unknown

/**
 * @summary Get a list of all messages for a given conversation
 */
export const useGetConversationConversationId = <
  TData = Awaited<ReturnType<typeof getConversationConversationId>>,
  TError = unknown
>(
  conversationId: MaybeRef<string>,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getConversationConversationId>>,
      TError,
      TData
    >
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetConversationConversationIdQueryOptions(conversationId, options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey as QueryKey

  return query
}

/**
 * @summary Post reply to conversation
 */
export const postConversationConversationId = (
  conversationId: MaybeRef<string>,
  createReplyRequestBaseDtoUyptry: MaybeRef<CreateReplyRequestBaseDtoUyptry>
) => {
  return customInstance<CreateReplyResponseDtoQsizqa>({
    url: `/conversation/${unref(conversationId)}`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: createReplyRequestBaseDtoUyptry
  })
}

export const getPostConversationConversationIdMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postConversationConversationId>>,
    TError,
    { conversationId: string; data: CreateReplyRequestBaseDtoUyptry },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postConversationConversationId>>,
  TError,
  { conversationId: string; data: CreateReplyRequestBaseDtoUyptry },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postConversationConversationId>>,
    { conversationId: string; data: CreateReplyRequestBaseDtoUyptry }
  > = (props) => {
    const { conversationId, data } = props ?? {}

    return postConversationConversationId(conversationId, data)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostConversationConversationIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof postConversationConversationId>>
>
export type PostConversationConversationIdMutationBody = CreateReplyRequestBaseDtoUyptry
export type PostConversationConversationIdMutationError = unknown

/**
 * @summary Post reply to conversation
 */
export const usePostConversationConversationId = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postConversationConversationId>>,
    TError,
    { conversationId: string; data: CreateReplyRequestBaseDtoUyptry },
    TContext
  >
}) => {
  const mutationOptions = getPostConversationConversationIdMutationOptions(options)

  return useMutation(mutationOptions)
}
