/**
 * Generated by orval v6.16.0 üç∫
 * Do not edit manually.
 * Liftshare Private API
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from '@tanstack/vue-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  QueryKey,
  UseQueryReturnType
} from '@tanstack/vue-query'
import type { MaybeRef } from '@tanstack/vue-query/build/lib/types'
import type {
  CommunityParkingAssetsForUserResponseDtoUnhunja,
  HasNumberplateResponseDtoMlta,
  InsertOrUpdateNumberplateRequestDtoZpnhi,
  ValidationExceptionResponseDtoLtlwwzy,
  InsertOrUpdateNumberplateRequestBaseDtoEebfuhy,
  BookParkingAssetResponseDtoYvsa,
  BookParkingAssetRequestBaseDtoWqijsui
} from '.././model'
import { customInstance } from '../../../axiosInstance'

type AwaitedInput<T> = PromiseLike<T> | T

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never

/**
 * @summary List of appy parking assets assigned to user
 */
export const getParkingAssets = (signal?: AbortSignal) => {
  return customInstance<CommunityParkingAssetsForUserResponseDtoUnhunja>({
    url: `/parking/assets`,
    method: 'get',
    signal
  })
}

export const getGetParkingAssetsQueryKey = () => ['parking', 'assets'] as const

export const getGetParkingAssetsQueryOptions = <
  TData = Awaited<ReturnType<typeof getParkingAssets>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getParkingAssets>>, TError, TData>
}): UseQueryOptions<Awaited<ReturnType<typeof getParkingAssets>>, TError, TData> => {
  const { query: queryOptions } = options ?? {}

  const queryKey = getGetParkingAssetsQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getParkingAssets>>> = ({ signal }) =>
    getParkingAssets(signal)

  return { queryKey, queryFn, ...queryOptions }
}

export type GetParkingAssetsQueryResult = NonNullable<Awaited<ReturnType<typeof getParkingAssets>>>
export type GetParkingAssetsQueryError = unknown

/**
 * @summary List of appy parking assets assigned to user
 */
export const useGetParkingAssets = <
  TData = Awaited<ReturnType<typeof getParkingAssets>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getParkingAssets>>, TError, TData>
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetParkingAssetsQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey as QueryKey

  return query
}

/**
 * @summary Determine if user as added there numberplate as an answer to an optional question with category = numberplate
 */
export const getParkingHasNumberplate = (signal?: AbortSignal) => {
  return customInstance<HasNumberplateResponseDtoMlta>({
    url: `/parking/has-numberplate`,
    method: 'get',
    signal
  })
}

export const getGetParkingHasNumberplateQueryKey = () => ['parking', 'has-numberplate'] as const

export const getGetParkingHasNumberplateQueryOptions = <
  TData = Awaited<ReturnType<typeof getParkingHasNumberplate>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getParkingHasNumberplate>>, TError, TData>
}): UseQueryOptions<Awaited<ReturnType<typeof getParkingHasNumberplate>>, TError, TData> => {
  const { query: queryOptions } = options ?? {}

  const queryKey = getGetParkingHasNumberplateQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getParkingHasNumberplate>>> = ({
    signal
  }) => getParkingHasNumberplate(signal)

  return { queryKey, queryFn, ...queryOptions }
}

export type GetParkingHasNumberplateQueryResult = NonNullable<
  Awaited<ReturnType<typeof getParkingHasNumberplate>>
>
export type GetParkingHasNumberplateQueryError = unknown

/**
 * @summary Determine if user as added there numberplate as an answer to an optional question with category = numberplate
 */
export const useGetParkingHasNumberplate = <
  TData = Awaited<ReturnType<typeof getParkingHasNumberplate>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getParkingHasNumberplate>>, TError, TData>
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetParkingHasNumberplateQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey as QueryKey

  return query
}

/**
 * @summary Insert or update a users numberplate
 */
export const postParkingNumberplate = (
  insertOrUpdateNumberplateRequestBaseDtoEebfuhy: MaybeRef<InsertOrUpdateNumberplateRequestBaseDtoEebfuhy>
) => {
  return customInstance<InsertOrUpdateNumberplateRequestDtoZpnhi>({
    url: `/parking/numberplate`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: insertOrUpdateNumberplateRequestBaseDtoEebfuhy
  })
}

export const getPostParkingNumberplateMutationOptions = <
  TError = ValidationExceptionResponseDtoLtlwwzy,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postParkingNumberplate>>,
    TError,
    { data: InsertOrUpdateNumberplateRequestBaseDtoEebfuhy },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postParkingNumberplate>>,
  TError,
  { data: InsertOrUpdateNumberplateRequestBaseDtoEebfuhy },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postParkingNumberplate>>,
    { data: InsertOrUpdateNumberplateRequestBaseDtoEebfuhy }
  > = (props) => {
    const { data } = props ?? {}

    return postParkingNumberplate(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostParkingNumberplateMutationResult = NonNullable<
  Awaited<ReturnType<typeof postParkingNumberplate>>
>
export type PostParkingNumberplateMutationBody = InsertOrUpdateNumberplateRequestBaseDtoEebfuhy
export type PostParkingNumberplateMutationError = ValidationExceptionResponseDtoLtlwwzy

/**
 * @summary Insert or update a users numberplate
 */
export const usePostParkingNumberplate = <
  TError = ValidationExceptionResponseDtoLtlwwzy,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postParkingNumberplate>>,
    TError,
    { data: InsertOrUpdateNumberplateRequestBaseDtoEebfuhy },
    TContext
  >
}) => {
  const mutationOptions = getPostParkingNumberplateMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary Starts a parking session with appy parking for the current user
 */
export const postParkingBeginSession = (
  bookParkingAssetRequestBaseDtoWqijsui: MaybeRef<BookParkingAssetRequestBaseDtoWqijsui>
) => {
  return customInstance<BookParkingAssetResponseDtoYvsa>({
    url: `/parking/begin-session`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: bookParkingAssetRequestBaseDtoWqijsui
  })
}

export const getPostParkingBeginSessionMutationOptions = <
  TError = ValidationExceptionResponseDtoLtlwwzy,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postParkingBeginSession>>,
    TError,
    { data: BookParkingAssetRequestBaseDtoWqijsui },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postParkingBeginSession>>,
  TError,
  { data: BookParkingAssetRequestBaseDtoWqijsui },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postParkingBeginSession>>,
    { data: BookParkingAssetRequestBaseDtoWqijsui }
  > = (props) => {
    const { data } = props ?? {}

    return postParkingBeginSession(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostParkingBeginSessionMutationResult = NonNullable<
  Awaited<ReturnType<typeof postParkingBeginSession>>
>
export type PostParkingBeginSessionMutationBody = BookParkingAssetRequestBaseDtoWqijsui
export type PostParkingBeginSessionMutationError = ValidationExceptionResponseDtoLtlwwzy

/**
 * @summary Starts a parking session with appy parking for the current user
 */
export const usePostParkingBeginSession = <
  TError = ValidationExceptionResponseDtoLtlwwzy,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postParkingBeginSession>>,
    TError,
    { data: BookParkingAssetRequestBaseDtoWqijsui },
    TContext
  >
}) => {
  const mutationOptions = getPostParkingBeginSessionMutationOptions(options)

  return useMutation(mutationOptions)
}
