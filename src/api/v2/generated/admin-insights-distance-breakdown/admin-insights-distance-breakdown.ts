/**
 * Generated by orval v6.16.0 üç∫
 * Do not edit manually.
 * Mobilityways API
 * OpenAPI spec version: 2.0.0
 */
import { useMutation } from '@tanstack/vue-query'
import type { UseMutationOptions, MutationFunction } from '@tanstack/vue-query'
import type { MaybeRef } from '@tanstack/vue-query/build/lib/types'
import type {
  AbstractModuleApiResponseDistanceFrequencyBreakdownRequestDistanceFrequencyBreakdownResponseDistanceFrequencyBreakdownResponseNxti,
  DistanceFrequencyBreakdownRequestSlqi
} from '.././model'
import { customInstance } from '../../../axiosInstance'

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <T>() => T extends Y
  ? 1
  : 2
  ? A
  : B

type WritableKeys<T> = {
  [P in keyof T]-?: IfEquals<{ [Q in P]: T[P] }, { -readonly [Q in P]: T[P] }, P>
}[keyof T]

type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (k: infer I) => void
  ? I
  : never
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never

type Writable<T> = Pick<T, WritableKeys<T>>
type NonReadonly<T> = [T] extends [UnionToIntersection<T>]
  ? {
      [P in keyof Writable<T>]: T[P] extends object ? NonReadonly<NonNullable<T[P]>> : T[P]
    }
  : DistributeReadOnlyOverUnions<T>

type AwaitedInput<T> = PromiseLike<T> | T

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never

export const postV2TravelPlanAdminOverviewDistanceFrequencyBreakdown = (
  distanceFrequencyBreakdownRequestSlqi: MaybeRef<
    NonReadonly<DistanceFrequencyBreakdownRequestSlqi>
  >
) => {
  return customInstance<AbstractModuleApiResponseDistanceFrequencyBreakdownRequestDistanceFrequencyBreakdownResponseDistanceFrequencyBreakdownResponseNxti>(
    {
      url: `/v2/travel-plan/admin-overview/distance-frequency-breakdown`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: distanceFrequencyBreakdownRequestSlqi
    }
  )
}

export const getPostV2TravelPlanAdminOverviewDistanceFrequencyBreakdownMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV2TravelPlanAdminOverviewDistanceFrequencyBreakdown>>,
    TError,
    { data: NonReadonly<DistanceFrequencyBreakdownRequestSlqi> },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV2TravelPlanAdminOverviewDistanceFrequencyBreakdown>>,
  TError,
  { data: NonReadonly<DistanceFrequencyBreakdownRequestSlqi> },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV2TravelPlanAdminOverviewDistanceFrequencyBreakdown>>,
    { data: NonReadonly<DistanceFrequencyBreakdownRequestSlqi> }
  > = (props) => {
    const { data } = props ?? {}

    return postV2TravelPlanAdminOverviewDistanceFrequencyBreakdown(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostV2TravelPlanAdminOverviewDistanceFrequencyBreakdownMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV2TravelPlanAdminOverviewDistanceFrequencyBreakdown>>
>
export type PostV2TravelPlanAdminOverviewDistanceFrequencyBreakdownMutationBody =
  NonReadonly<DistanceFrequencyBreakdownRequestSlqi>
export type PostV2TravelPlanAdminOverviewDistanceFrequencyBreakdownMutationError = unknown

export const usePostV2TravelPlanAdminOverviewDistanceFrequencyBreakdown = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV2TravelPlanAdminOverviewDistanceFrequencyBreakdown>>,
    TError,
    { data: NonReadonly<DistanceFrequencyBreakdownRequestSlqi> },
    TContext
  >
}) => {
  const mutationOptions =
    getPostV2TravelPlanAdminOverviewDistanceFrequencyBreakdownMutationOptions(options)

  return useMutation(mutationOptions)
}
