/**
 * Generated by orval v6.16.0 üç∫
 * Do not edit manually.
 * Mobilityways API
 * OpenAPI spec version: 2.0.0
 */
import { useMutation } from '@tanstack/vue-query'
import type { UseMutationOptions, MutationFunction } from '@tanstack/vue-query'
import type { MaybeRef } from '@tanstack/vue-query/build/lib/types'
import type {
  AbstractModuleApiResponseAdminTokenCreateRequestAdminTokenCreateResponseAdminTokenCreateResponseChhyfgy,
  AdminTokenCreateRequestKiaya,
  AbstractModuleApiResponseAdminTokenRefreshRequestAdminTokenRefreshResponseAdminTokenRefreshResponseQjkaosq,
  AdminTokenRefreshRequestQwdywq,
  AbstractModuleApiResponseAdminTokenTwoFactorCreateRequestAdminTokenTwoFactorCreateResponseAdminTokenTwoFactorCreateResponseCaulcy,
  AdminTokenTwoFactorCreateRequestIifgka,
  AbstractModuleApiResponseTokenCreateRequestTokenCreateResponseTokenCreateResponseZumua,
  TokenCreateRequestHakhvwy
} from '.././model'
import { customInstance } from '../../../axiosInstance'

type AwaitedInput<T> = PromiseLike<T> | T

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never

/**
 * Main way of authenticating and generating a JWT
 */
export const postV2Token = (
  adminTokenCreateRequestKiaya: MaybeRef<AdminTokenCreateRequestKiaya>
) => {
  return customInstance<AbstractModuleApiResponseAdminTokenCreateRequestAdminTokenCreateResponseAdminTokenCreateResponseChhyfgy>(
    {
      url: `/v2/token`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: adminTokenCreateRequestKiaya
    }
  )
}

export const getPostV2TokenMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV2Token>>,
    TError,
    { data: AdminTokenCreateRequestKiaya },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV2Token>>,
  TError,
  { data: AdminTokenCreateRequestKiaya },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV2Token>>,
    { data: AdminTokenCreateRequestKiaya }
  > = (props) => {
    const { data } = props ?? {}

    return postV2Token(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostV2TokenMutationResult = NonNullable<Awaited<ReturnType<typeof postV2Token>>>
export type PostV2TokenMutationBody = AdminTokenCreateRequestKiaya
export type PostV2TokenMutationError = unknown

export const usePostV2Token = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV2Token>>,
    TError,
    { data: AdminTokenCreateRequestKiaya },
    TContext
  >
}) => {
  const mutationOptions = getPostV2TokenMutationOptions(options)

  return useMutation(mutationOptions)
}
export const postV2TokenRefresh = (
  adminTokenRefreshRequestQwdywq: MaybeRef<AdminTokenRefreshRequestQwdywq>
) => {
  return customInstance<AbstractModuleApiResponseAdminTokenRefreshRequestAdminTokenRefreshResponseAdminTokenRefreshResponseQjkaosq>(
    {
      url: `/v2/token/refresh`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: adminTokenRefreshRequestQwdywq
    }
  )
}

export const getPostV2TokenRefreshMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV2TokenRefresh>>,
    TError,
    { data: AdminTokenRefreshRequestQwdywq },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV2TokenRefresh>>,
  TError,
  { data: AdminTokenRefreshRequestQwdywq },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV2TokenRefresh>>,
    { data: AdminTokenRefreshRequestQwdywq }
  > = (props) => {
    const { data } = props ?? {}

    return postV2TokenRefresh(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostV2TokenRefreshMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV2TokenRefresh>>
>
export type PostV2TokenRefreshMutationBody = AdminTokenRefreshRequestQwdywq
export type PostV2TokenRefreshMutationError = unknown

export const usePostV2TokenRefresh = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV2TokenRefresh>>,
    TError,
    { data: AdminTokenRefreshRequestQwdywq },
    TContext
  >
}) => {
  const mutationOptions = getPostV2TokenRefreshMutationOptions(options)

  return useMutation(mutationOptions)
}
export const postV2TokenTwoFactor = (
  adminTokenTwoFactorCreateRequestIifgka: MaybeRef<AdminTokenTwoFactorCreateRequestIifgka>
) => {
  return customInstance<AbstractModuleApiResponseAdminTokenTwoFactorCreateRequestAdminTokenTwoFactorCreateResponseAdminTokenTwoFactorCreateResponseCaulcy>(
    {
      url: `/v2/token/two-factor`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: adminTokenTwoFactorCreateRequestIifgka
    }
  )
}

export const getPostV2TokenTwoFactorMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV2TokenTwoFactor>>,
    TError,
    { data: AdminTokenTwoFactorCreateRequestIifgka },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV2TokenTwoFactor>>,
  TError,
  { data: AdminTokenTwoFactorCreateRequestIifgka },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV2TokenTwoFactor>>,
    { data: AdminTokenTwoFactorCreateRequestIifgka }
  > = (props) => {
    const { data } = props ?? {}

    return postV2TokenTwoFactor(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostV2TokenTwoFactorMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV2TokenTwoFactor>>
>
export type PostV2TokenTwoFactorMutationBody = AdminTokenTwoFactorCreateRequestIifgka
export type PostV2TokenTwoFactorMutationError = unknown

export const usePostV2TokenTwoFactor = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV2TokenTwoFactor>>,
    TError,
    { data: AdminTokenTwoFactorCreateRequestIifgka },
    TContext
  >
}) => {
  const mutationOptions = getPostV2TokenTwoFactorMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Main way of authenticating and generating a JWT
 */
export const postV2LiftshareToken = (
  tokenCreateRequestHakhvwy: MaybeRef<TokenCreateRequestHakhvwy>
) => {
  return customInstance<AbstractModuleApiResponseTokenCreateRequestTokenCreateResponseTokenCreateResponseZumua>(
    {
      url: `/v2/liftshare/token`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: tokenCreateRequestHakhvwy
    }
  )
}

export const getPostV2LiftshareTokenMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV2LiftshareToken>>,
    TError,
    { data: TokenCreateRequestHakhvwy },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV2LiftshareToken>>,
  TError,
  { data: TokenCreateRequestHakhvwy },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV2LiftshareToken>>,
    { data: TokenCreateRequestHakhvwy }
  > = (props) => {
    const { data } = props ?? {}

    return postV2LiftshareToken(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostV2LiftshareTokenMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV2LiftshareToken>>
>
export type PostV2LiftshareTokenMutationBody = TokenCreateRequestHakhvwy
export type PostV2LiftshareTokenMutationError = unknown

export const usePostV2LiftshareToken = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV2LiftshareToken>>,
    TError,
    { data: TokenCreateRequestHakhvwy },
    TContext
  >
}) => {
  const mutationOptions = getPostV2LiftshareTokenMutationOptions(options)

  return useMutation(mutationOptions)
}
