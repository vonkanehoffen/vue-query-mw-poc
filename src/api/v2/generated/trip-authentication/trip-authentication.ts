/**
 * Generated by orval v6.16.0 üç∫
 * Do not edit manually.
 * Mobilityways API
 * OpenAPI spec version: 2.0.0
 */
import { useQuery, useMutation } from '@tanstack/vue-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  QueryKey,
  UseQueryReturnType
} from '@tanstack/vue-query';
import { unref } from 'vue';
import type { MaybeRef } from '@tanstack/vue-query/build/lib/types';
import type {
  AbstractModuleApiResponseAuthenticatedTripsRequestAuthenticatedTripsResponseAuthenticatedTripsResponseSqylhza,
  AbstractModuleApiResponseTripAuthenticationReminderDetailsRequestTripAuthenticationReminderDetailsResponseTripAuthenticationReminderDetailsResponseSwoq,
  AbstractModuleApiResponseTripAuthenticationReminderUpdateRequestTripAuthenticationReminderUpdateResponseTripAuthenticationReminderUpdateResponseAkhrq,
  TripAuthenticationReminderUpdateBaseRequestCsidjia
} from '.././model';
import { customInstance } from '../../../axiosInstance';

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

export const getV2LiftshareTripAuthenticationTeamId = (
  teamId?: MaybeRef<number>,
  signal?: AbortSignal
) => {
  return customInstance<AbstractModuleApiResponseAuthenticatedTripsRequestAuthenticatedTripsResponseAuthenticatedTripsResponseSqylhza>(
    { url: `/v2/liftshare/trip-authentication/${unref(teamId)}`, method: 'get', signal }
  );
};

export const getGetV2LiftshareTripAuthenticationTeamIdQueryKey = (teamId?: MaybeRef<number>) =>
  ['v2', 'liftshare', 'trip-authentication', teamId] as const;

export const getGetV2LiftshareTripAuthenticationTeamIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getV2LiftshareTripAuthenticationTeamId>>,
  TError = unknown
>(
  teamId?: MaybeRef<number>,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getV2LiftshareTripAuthenticationTeamId>>,
      TError,
      TData
    >;
  }
): UseQueryOptions<
  Awaited<ReturnType<typeof getV2LiftshareTripAuthenticationTeamId>>,
  TError,
  TData
> => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getGetV2LiftshareTripAuthenticationTeamIdQueryKey(teamId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getV2LiftshareTripAuthenticationTeamId>>
  > = ({ signal }) => getV2LiftshareTripAuthenticationTeamId(teamId, signal);

  return { queryKey, queryFn, enabled: !!teamId, ...queryOptions };
};

export type GetV2LiftshareTripAuthenticationTeamIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV2LiftshareTripAuthenticationTeamId>>
>;
export type GetV2LiftshareTripAuthenticationTeamIdQueryError = unknown;

export const useGetV2LiftshareTripAuthenticationTeamId = <
  TData = Awaited<ReturnType<typeof getV2LiftshareTripAuthenticationTeamId>>,
  TError = unknown
>(
  teamId?: MaybeRef<number>,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getV2LiftshareTripAuthenticationTeamId>>,
      TError,
      TData
    >;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetV2LiftshareTripAuthenticationTeamIdQueryOptions(teamId, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey as QueryKey;

  return query;
};

export const getV2LiftshareTripAuthenticationReminder = (signal?: AbortSignal) => {
  return customInstance<AbstractModuleApiResponseTripAuthenticationReminderDetailsRequestTripAuthenticationReminderDetailsResponseTripAuthenticationReminderDetailsResponseSwoq>(
    { url: `/v2/liftshare/trip-authentication/reminder`, method: 'get', signal }
  );
};

export const getGetV2LiftshareTripAuthenticationReminderQueryKey = () =>
  ['v2', 'liftshare', 'trip-authentication', 'reminder'] as const;

export const getGetV2LiftshareTripAuthenticationReminderQueryOptions = <
  TData = Awaited<ReturnType<typeof getV2LiftshareTripAuthenticationReminder>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getV2LiftshareTripAuthenticationReminder>>,
    TError,
    TData
  >;
}): UseQueryOptions<
  Awaited<ReturnType<typeof getV2LiftshareTripAuthenticationReminder>>,
  TError,
  TData
> => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getGetV2LiftshareTripAuthenticationReminderQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getV2LiftshareTripAuthenticationReminder>>
  > = ({ signal }) => getV2LiftshareTripAuthenticationReminder(signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type GetV2LiftshareTripAuthenticationReminderQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV2LiftshareTripAuthenticationReminder>>
>;
export type GetV2LiftshareTripAuthenticationReminderQueryError = unknown;

export const useGetV2LiftshareTripAuthenticationReminder = <
  TData = Awaited<ReturnType<typeof getV2LiftshareTripAuthenticationReminder>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getV2LiftshareTripAuthenticationReminder>>,
    TError,
    TData
  >;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetV2LiftshareTripAuthenticationReminderQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey as QueryKey;

  return query;
};

export const putV2LiftshareTripAuthenticationReminder = (
  tripAuthenticationReminderUpdateBaseRequestCsidjia: MaybeRef<TripAuthenticationReminderUpdateBaseRequestCsidjia>
) => {
  return customInstance<AbstractModuleApiResponseTripAuthenticationReminderUpdateRequestTripAuthenticationReminderUpdateResponseTripAuthenticationReminderUpdateResponseAkhrq>(
    {
      url: `/v2/liftshare/trip-authentication/reminder`,
      method: 'put',
      headers: { 'Content-Type': 'application/json' },
      data: tripAuthenticationReminderUpdateBaseRequestCsidjia
    }
  );
};

export const getPutV2LiftshareTripAuthenticationReminderMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putV2LiftshareTripAuthenticationReminder>>,
    TError,
    { data: TripAuthenticationReminderUpdateBaseRequestCsidjia },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putV2LiftshareTripAuthenticationReminder>>,
  TError,
  { data: TripAuthenticationReminderUpdateBaseRequestCsidjia },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putV2LiftshareTripAuthenticationReminder>>,
    { data: TripAuthenticationReminderUpdateBaseRequestCsidjia }
  > = (props) => {
    const { data } = props ?? {};

    return putV2LiftshareTripAuthenticationReminder(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutV2LiftshareTripAuthenticationReminderMutationResult = NonNullable<
  Awaited<ReturnType<typeof putV2LiftshareTripAuthenticationReminder>>
>;
export type PutV2LiftshareTripAuthenticationReminderMutationBody =
  TripAuthenticationReminderUpdateBaseRequestCsidjia;
export type PutV2LiftshareTripAuthenticationReminderMutationError = unknown;

export const usePutV2LiftshareTripAuthenticationReminder = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putV2LiftshareTripAuthenticationReminder>>,
    TError,
    { data: TripAuthenticationReminderUpdateBaseRequestCsidjia },
    TContext
  >;
}) => {
  const mutationOptions = getPutV2LiftshareTripAuthenticationReminderMutationOptions(options);

  return useMutation(mutationOptions);
};
