/**
 * Generated by orval v6.16.0 üç∫
 * Do not edit manually.
 * Mobilityways API
 * OpenAPI spec version: 2.0.0
 */
import { useQuery, useMutation } from '@tanstack/vue-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  QueryKey,
  UseQueryReturnType
} from '@tanstack/vue-query'
import { unref } from 'vue'
import type { MaybeRef } from '@tanstack/vue-query/build/lib/types'
import type {
  AbstractModuleApiResponseNpsCreateRequestNpsCreateResponseNpsCreateResponseFmry,
  NpsCreateBaseRequestBrtfa,
  AbstractModuleApiResponseNpsUpdateRequestNpsUpdateResponseNpsUpdateResponseGzqniq,
  NpsUpdateBaseRequestCokchmq,
  AbstractModuleApiResponseNpsDetailsRequestNpsDetailsResponseNpsDetailsResponseIrqpfa
} from '.././model'
import { customInstance } from '../../../axiosInstance'

type AwaitedInput<T> = PromiseLike<T> | T

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never

export const postV2Nps = (npsCreateBaseRequestBrtfa: MaybeRef<NpsCreateBaseRequestBrtfa>) => {
  return customInstance<AbstractModuleApiResponseNpsCreateRequestNpsCreateResponseNpsCreateResponseFmry>(
    {
      url: `/v2/nps`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: npsCreateBaseRequestBrtfa
    }
  )
}

export const getPostV2NpsMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV2Nps>>,
    TError,
    { data: NpsCreateBaseRequestBrtfa },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV2Nps>>,
  TError,
  { data: NpsCreateBaseRequestBrtfa },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV2Nps>>,
    { data: NpsCreateBaseRequestBrtfa }
  > = (props) => {
    const { data } = props ?? {}

    return postV2Nps(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostV2NpsMutationResult = NonNullable<Awaited<ReturnType<typeof postV2Nps>>>
export type PostV2NpsMutationBody = NpsCreateBaseRequestBrtfa
export type PostV2NpsMutationError = unknown

export const usePostV2Nps = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV2Nps>>,
    TError,
    { data: NpsCreateBaseRequestBrtfa },
    TContext
  >
}) => {
  const mutationOptions = getPostV2NpsMutationOptions(options)

  return useMutation(mutationOptions)
}
export const putV2Nps = (npsUpdateBaseRequestCokchmq: MaybeRef<NpsUpdateBaseRequestCokchmq>) => {
  return customInstance<AbstractModuleApiResponseNpsUpdateRequestNpsUpdateResponseNpsUpdateResponseGzqniq>(
    {
      url: `/v2/nps`,
      method: 'put',
      headers: { 'Content-Type': 'application/json' },
      data: npsUpdateBaseRequestCokchmq
    }
  )
}

export const getPutV2NpsMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putV2Nps>>,
    TError,
    { data: NpsUpdateBaseRequestCokchmq },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof putV2Nps>>,
  TError,
  { data: NpsUpdateBaseRequestCokchmq },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putV2Nps>>,
    { data: NpsUpdateBaseRequestCokchmq }
  > = (props) => {
    const { data } = props ?? {}

    return putV2Nps(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type PutV2NpsMutationResult = NonNullable<Awaited<ReturnType<typeof putV2Nps>>>
export type PutV2NpsMutationBody = NpsUpdateBaseRequestCokchmq
export type PutV2NpsMutationError = unknown

export const usePutV2Nps = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putV2Nps>>,
    TError,
    { data: NpsUpdateBaseRequestCokchmq },
    TContext
  >
}) => {
  const mutationOptions = getPutV2NpsMutationOptions(options)

  return useMutation(mutationOptions)
}
export const getV2NpsCategory = (category: MaybeRef<string>, signal?: AbortSignal) => {
  return customInstance<AbstractModuleApiResponseNpsDetailsRequestNpsDetailsResponseNpsDetailsResponseIrqpfa>(
    { url: `/v2/nps/${unref(category)}`, method: 'get', signal }
  )
}

export const getGetV2NpsCategoryQueryKey = (category: MaybeRef<string>) =>
  ['v2', 'nps', category] as const

export const getGetV2NpsCategoryQueryOptions = <
  TData = Awaited<ReturnType<typeof getV2NpsCategory>>,
  TError = unknown
>(
  category: MaybeRef<string>,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getV2NpsCategory>>, TError, TData> }
): UseQueryOptions<Awaited<ReturnType<typeof getV2NpsCategory>>, TError, TData> => {
  const { query: queryOptions } = options ?? {}

  const queryKey = getGetV2NpsCategoryQueryKey(category)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getV2NpsCategory>>> = ({ signal }) =>
    getV2NpsCategory(category, signal)

  return { queryKey, queryFn, enabled: !!category, ...queryOptions }
}

export type GetV2NpsCategoryQueryResult = NonNullable<Awaited<ReturnType<typeof getV2NpsCategory>>>
export type GetV2NpsCategoryQueryError = unknown

export const useGetV2NpsCategory = <
  TData = Awaited<ReturnType<typeof getV2NpsCategory>>,
  TError = unknown
>(
  category: MaybeRef<string>,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getV2NpsCategory>>, TError, TData> }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetV2NpsCategoryQueryOptions(category, options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey as QueryKey

  return query
}
