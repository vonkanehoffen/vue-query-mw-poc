/**
 * Generated by orval v6.16.0 üç∫
 * Do not edit manually.
 * Mobilityways API
 * OpenAPI spec version: 2.0.0
 */
import { useQuery, useMutation } from '@tanstack/vue-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  QueryKey,
  UseQueryReturnType
} from '@tanstack/vue-query'
import { unref } from 'vue'
import type { MaybeRef } from '@tanstack/vue-query/build/lib/types'
import type {
  AbstractModuleApiResponseSubscriptionDetailsRequestSubscriptionDetailsResponseSubscriptionDetailsResponsePcxfy,
  AbstractModuleApiResponseSubscriptionReasonCreateRequestSubscriptionReasonCreateResponseSubscriptionReasonCreateResponseDybtfly,
  SubscriptionReasonCreateRequestGnalpaa,
  AbstractModuleApiResponseSubscriptionUpdateRequestSubscriptionUpdateResponseSubscriptionUpdateResponseCqderq,
  SubscriptionUpdateRequestBefoq
} from '.././model'
import { customInstance } from '../../../axiosInstance'

type AwaitedInput<T> = PromiseLike<T> | T

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never

export const getV2LiftshareSubscriptionToken = (token: MaybeRef<string>, signal?: AbortSignal) => {
  return customInstance<AbstractModuleApiResponseSubscriptionDetailsRequestSubscriptionDetailsResponseSubscriptionDetailsResponsePcxfy>(
    { url: `/v2/liftshare/subscription/${unref(token)}`, method: 'get', signal }
  )
}

export const getGetV2LiftshareSubscriptionTokenQueryKey = (token: MaybeRef<string>) =>
  ['v2', 'liftshare', 'subscription', token] as const

export const getGetV2LiftshareSubscriptionTokenQueryOptions = <
  TData = Awaited<ReturnType<typeof getV2LiftshareSubscriptionToken>>,
  TError = unknown
>(
  token: MaybeRef<string>,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getV2LiftshareSubscriptionToken>>,
      TError,
      TData
    >
  }
): UseQueryOptions<Awaited<ReturnType<typeof getV2LiftshareSubscriptionToken>>, TError, TData> => {
  const { query: queryOptions } = options ?? {}

  const queryKey = getGetV2LiftshareSubscriptionTokenQueryKey(token)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getV2LiftshareSubscriptionToken>>> = ({
    signal
  }) => getV2LiftshareSubscriptionToken(token, signal)

  return { queryKey, queryFn, enabled: !!token, ...queryOptions }
}

export type GetV2LiftshareSubscriptionTokenQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV2LiftshareSubscriptionToken>>
>
export type GetV2LiftshareSubscriptionTokenQueryError = unknown

export const useGetV2LiftshareSubscriptionToken = <
  TData = Awaited<ReturnType<typeof getV2LiftshareSubscriptionToken>>,
  TError = unknown
>(
  token: MaybeRef<string>,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getV2LiftshareSubscriptionToken>>,
      TError,
      TData
    >
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetV2LiftshareSubscriptionTokenQueryOptions(token, options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey as QueryKey

  return query
}

export const postV2LiftshareSubscriptionReason = (
  subscriptionReasonCreateRequestGnalpaa: MaybeRef<SubscriptionReasonCreateRequestGnalpaa>
) => {
  return customInstance<AbstractModuleApiResponseSubscriptionReasonCreateRequestSubscriptionReasonCreateResponseSubscriptionReasonCreateResponseDybtfly>(
    {
      url: `/v2/liftshare/subscription/reason`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: subscriptionReasonCreateRequestGnalpaa
    }
  )
}

export const getPostV2LiftshareSubscriptionReasonMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV2LiftshareSubscriptionReason>>,
    TError,
    { data: SubscriptionReasonCreateRequestGnalpaa },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV2LiftshareSubscriptionReason>>,
  TError,
  { data: SubscriptionReasonCreateRequestGnalpaa },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV2LiftshareSubscriptionReason>>,
    { data: SubscriptionReasonCreateRequestGnalpaa }
  > = (props) => {
    const { data } = props ?? {}

    return postV2LiftshareSubscriptionReason(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostV2LiftshareSubscriptionReasonMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV2LiftshareSubscriptionReason>>
>
export type PostV2LiftshareSubscriptionReasonMutationBody = SubscriptionReasonCreateRequestGnalpaa
export type PostV2LiftshareSubscriptionReasonMutationError = unknown

export const usePostV2LiftshareSubscriptionReason = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV2LiftshareSubscriptionReason>>,
    TError,
    { data: SubscriptionReasonCreateRequestGnalpaa },
    TContext
  >
}) => {
  const mutationOptions = getPostV2LiftshareSubscriptionReasonMutationOptions(options)

  return useMutation(mutationOptions)
}
export const putV2LiftshareSubscription = (
  subscriptionUpdateRequestBefoq: MaybeRef<SubscriptionUpdateRequestBefoq>
) => {
  return customInstance<AbstractModuleApiResponseSubscriptionUpdateRequestSubscriptionUpdateResponseSubscriptionUpdateResponseCqderq>(
    {
      url: `/v2/liftshare/subscription`,
      method: 'put',
      headers: { 'Content-Type': 'application/json' },
      data: subscriptionUpdateRequestBefoq
    }
  )
}

export const getPutV2LiftshareSubscriptionMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putV2LiftshareSubscription>>,
    TError,
    { data: SubscriptionUpdateRequestBefoq },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof putV2LiftshareSubscription>>,
  TError,
  { data: SubscriptionUpdateRequestBefoq },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putV2LiftshareSubscription>>,
    { data: SubscriptionUpdateRequestBefoq }
  > = (props) => {
    const { data } = props ?? {}

    return putV2LiftshareSubscription(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type PutV2LiftshareSubscriptionMutationResult = NonNullable<
  Awaited<ReturnType<typeof putV2LiftshareSubscription>>
>
export type PutV2LiftshareSubscriptionMutationBody = SubscriptionUpdateRequestBefoq
export type PutV2LiftshareSubscriptionMutationError = unknown

export const usePutV2LiftshareSubscription = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putV2LiftshareSubscription>>,
    TError,
    { data: SubscriptionUpdateRequestBefoq },
    TContext
  >
}) => {
  const mutationOptions = getPutV2LiftshareSubscriptionMutationOptions(options)

  return useMutation(mutationOptions)
}
