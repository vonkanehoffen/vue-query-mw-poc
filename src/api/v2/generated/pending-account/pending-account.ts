/**
 * Generated by orval v6.16.0 üç∫
 * Do not edit manually.
 * Mobilityways API
 * OpenAPI spec version: 2.0.0
 */
import { useQuery, useMutation } from '@tanstack/vue-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  QueryKey,
  UseQueryReturnType
} from '@tanstack/vue-query'
import { unref } from 'vue'
import type { MaybeRef } from '@tanstack/vue-query/build/lib/types'
import type {
  AbstractModuleApiResponsePendingLiftshareAccountBatchDeleteRequestPendingLiftshareAccountBatchDeleteResponsePendingLiftshareAccountBatchDeleteResponseBrvrri,
  AbstractModuleApiResponsePendingLiftshareAccountBatchDetailsRequestPendingLiftshareAccountBatchDetailsResponsePendingLiftshareAccountBatchDetailsResponsePtbyri,
  AbstractModuleApiResponsePendingLiftshareAccountBatchFinalizeRequestPendingLiftshareAccountBatchFinalizeResponsePendingLiftshareAccountBatchFinalizeResponseSwima,
  PendingLiftshareAccountBatchUpsertYkbrqy,
  AbstractModuleApiResponsePendingLiftshareAccountBatchListRequestPendingLiftshareAccountBatchListResponsePendingLiftshareAccountBatchListResponseIvqja,
  AbstractModuleApiResponsePendingLiftshareAccountBatchUpsertRequestPendingLiftshareAccountBatchUpsertResponsePendingLiftshareAccountBatchUpsertResponsePtry,
  AbstractModuleApiResponsePendingLiftshareAccountBatchPreviewRequestPendingLiftshareAccountBatchPreviewResponsePendingLiftshareAccountBatchPreviewResponseQhqedq,
  PendingLiftshareAccountBatchPreviewRequestOlxgra,
  AbstractModuleApiResponsePendingLiftshareAccountImageUpsertRequestPendingLiftshareAccountImageUpsertResponsePendingLiftshareAccountImageUpsertResponseQbxtmyy
} from '.././model'
import { customInstance } from '../../../axiosInstance'

type AwaitedInput<T> = PromiseLike<T> | T

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never

export const deleteV2PendingAccountBatchId = (id: MaybeRef<string>) => {
  return customInstance<AbstractModuleApiResponsePendingLiftshareAccountBatchDeleteRequestPendingLiftshareAccountBatchDeleteResponsePendingLiftshareAccountBatchDeleteResponseBrvrri>(
    { url: `/v2/pending-account/batch/${unref(id)}`, method: 'delete' }
  )
}

export const getDeleteV2PendingAccountBatchIdMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteV2PendingAccountBatchId>>,
    TError,
    { id: string },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteV2PendingAccountBatchId>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteV2PendingAccountBatchId>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {}

    return deleteV2PendingAccountBatchId(id)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteV2PendingAccountBatchIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteV2PendingAccountBatchId>>
>

export type DeleteV2PendingAccountBatchIdMutationError = unknown

export const useDeleteV2PendingAccountBatchId = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteV2PendingAccountBatchId>>,
    TError,
    { id: string },
    TContext
  >
}) => {
  const mutationOptions = getDeleteV2PendingAccountBatchIdMutationOptions(options)

  return useMutation(mutationOptions)
}
export const getV2PendingAccountBatchBatchId = (
  batchId: MaybeRef<string>,
  signal?: AbortSignal
) => {
  return customInstance<AbstractModuleApiResponsePendingLiftshareAccountBatchDetailsRequestPendingLiftshareAccountBatchDetailsResponsePendingLiftshareAccountBatchDetailsResponsePtbyri>(
    { url: `/v2/pending-account/batch/${unref(batchId)}`, method: 'get', signal }
  )
}

export const getGetV2PendingAccountBatchBatchIdQueryKey = (batchId: MaybeRef<string>) =>
  ['v2', 'pending-account', 'batch', batchId] as const

export const getGetV2PendingAccountBatchBatchIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getV2PendingAccountBatchBatchId>>,
  TError = unknown
>(
  batchId: MaybeRef<string>,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getV2PendingAccountBatchBatchId>>,
      TError,
      TData
    >
  }
): UseQueryOptions<Awaited<ReturnType<typeof getV2PendingAccountBatchBatchId>>, TError, TData> => {
  const { query: queryOptions } = options ?? {}

  const queryKey = getGetV2PendingAccountBatchBatchIdQueryKey(batchId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getV2PendingAccountBatchBatchId>>> = ({
    signal
  }) => getV2PendingAccountBatchBatchId(batchId, signal)

  return { queryKey, queryFn, enabled: !!batchId, ...queryOptions }
}

export type GetV2PendingAccountBatchBatchIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV2PendingAccountBatchBatchId>>
>
export type GetV2PendingAccountBatchBatchIdQueryError = unknown

export const useGetV2PendingAccountBatchBatchId = <
  TData = Awaited<ReturnType<typeof getV2PendingAccountBatchBatchId>>,
  TError = unknown
>(
  batchId: MaybeRef<string>,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getV2PendingAccountBatchBatchId>>,
      TError,
      TData
    >
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetV2PendingAccountBatchBatchIdQueryOptions(batchId, options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey as QueryKey

  return query
}

export const putV2PendingAccountBatchFinalize = (
  pendingLiftshareAccountBatchUpsertYkbrqy: MaybeRef<PendingLiftshareAccountBatchUpsertYkbrqy>
) => {
  return customInstance<AbstractModuleApiResponsePendingLiftshareAccountBatchFinalizeRequestPendingLiftshareAccountBatchFinalizeResponsePendingLiftshareAccountBatchFinalizeResponseSwima>(
    {
      url: `/v2/pending-account/batch/finalize`,
      method: 'put',
      headers: { 'Content-Type': 'application/json' },
      data: pendingLiftshareAccountBatchUpsertYkbrqy
    }
  )
}

export const getPutV2PendingAccountBatchFinalizeMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putV2PendingAccountBatchFinalize>>,
    TError,
    { data: PendingLiftshareAccountBatchUpsertYkbrqy },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof putV2PendingAccountBatchFinalize>>,
  TError,
  { data: PendingLiftshareAccountBatchUpsertYkbrqy },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putV2PendingAccountBatchFinalize>>,
    { data: PendingLiftshareAccountBatchUpsertYkbrqy }
  > = (props) => {
    const { data } = props ?? {}

    return putV2PendingAccountBatchFinalize(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type PutV2PendingAccountBatchFinalizeMutationResult = NonNullable<
  Awaited<ReturnType<typeof putV2PendingAccountBatchFinalize>>
>
export type PutV2PendingAccountBatchFinalizeMutationBody = PendingLiftshareAccountBatchUpsertYkbrqy
export type PutV2PendingAccountBatchFinalizeMutationError = unknown

export const usePutV2PendingAccountBatchFinalize = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putV2PendingAccountBatchFinalize>>,
    TError,
    { data: PendingLiftshareAccountBatchUpsertYkbrqy },
    TContext
  >
}) => {
  const mutationOptions = getPutV2PendingAccountBatchFinalizeMutationOptions(options)

  return useMutation(mutationOptions)
}
export const getV2PendingAccountBatch = (signal?: AbortSignal) => {
  return customInstance<AbstractModuleApiResponsePendingLiftshareAccountBatchListRequestPendingLiftshareAccountBatchListResponsePendingLiftshareAccountBatchListResponseIvqja>(
    { url: `/v2/pending-account/batch`, method: 'get', signal }
  )
}

export const getGetV2PendingAccountBatchQueryKey = () => ['v2', 'pending-account', 'batch'] as const

export const getGetV2PendingAccountBatchQueryOptions = <
  TData = Awaited<ReturnType<typeof getV2PendingAccountBatch>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getV2PendingAccountBatch>>, TError, TData>
}): UseQueryOptions<Awaited<ReturnType<typeof getV2PendingAccountBatch>>, TError, TData> => {
  const { query: queryOptions } = options ?? {}

  const queryKey = getGetV2PendingAccountBatchQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getV2PendingAccountBatch>>> = ({
    signal
  }) => getV2PendingAccountBatch(signal)

  return { queryKey, queryFn, ...queryOptions }
}

export type GetV2PendingAccountBatchQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV2PendingAccountBatch>>
>
export type GetV2PendingAccountBatchQueryError = unknown

export const useGetV2PendingAccountBatch = <
  TData = Awaited<ReturnType<typeof getV2PendingAccountBatch>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getV2PendingAccountBatch>>, TError, TData>
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetV2PendingAccountBatchQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey as QueryKey

  return query
}

export const putV2PendingAccountBatch = (
  pendingLiftshareAccountBatchUpsertYkbrqy: MaybeRef<PendingLiftshareAccountBatchUpsertYkbrqy>
) => {
  return customInstance<AbstractModuleApiResponsePendingLiftshareAccountBatchUpsertRequestPendingLiftshareAccountBatchUpsertResponsePendingLiftshareAccountBatchUpsertResponsePtry>(
    {
      url: `/v2/pending-account/batch`,
      method: 'put',
      headers: { 'Content-Type': 'application/json' },
      data: pendingLiftshareAccountBatchUpsertYkbrqy
    }
  )
}

export const getPutV2PendingAccountBatchMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putV2PendingAccountBatch>>,
    TError,
    { data: PendingLiftshareAccountBatchUpsertYkbrqy },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof putV2PendingAccountBatch>>,
  TError,
  { data: PendingLiftshareAccountBatchUpsertYkbrqy },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putV2PendingAccountBatch>>,
    { data: PendingLiftshareAccountBatchUpsertYkbrqy }
  > = (props) => {
    const { data } = props ?? {}

    return putV2PendingAccountBatch(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type PutV2PendingAccountBatchMutationResult = NonNullable<
  Awaited<ReturnType<typeof putV2PendingAccountBatch>>
>
export type PutV2PendingAccountBatchMutationBody = PendingLiftshareAccountBatchUpsertYkbrqy
export type PutV2PendingAccountBatchMutationError = unknown

export const usePutV2PendingAccountBatch = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putV2PendingAccountBatch>>,
    TError,
    { data: PendingLiftshareAccountBatchUpsertYkbrqy },
    TContext
  >
}) => {
  const mutationOptions = getPutV2PendingAccountBatchMutationOptions(options)

  return useMutation(mutationOptions)
}
export const postV2PendingAccountBatchPreviewEmail = (
  pendingLiftshareAccountBatchPreviewRequestOlxgra: MaybeRef<PendingLiftshareAccountBatchPreviewRequestOlxgra>
) => {
  return customInstance<AbstractModuleApiResponsePendingLiftshareAccountBatchPreviewRequestPendingLiftshareAccountBatchPreviewResponsePendingLiftshareAccountBatchPreviewResponseQhqedq>(
    {
      url: `/v2/pending-account/batch/preview-email`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: pendingLiftshareAccountBatchPreviewRequestOlxgra
    }
  )
}

export const getPostV2PendingAccountBatchPreviewEmailMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV2PendingAccountBatchPreviewEmail>>,
    TError,
    { data: PendingLiftshareAccountBatchPreviewRequestOlxgra },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV2PendingAccountBatchPreviewEmail>>,
  TError,
  { data: PendingLiftshareAccountBatchPreviewRequestOlxgra },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV2PendingAccountBatchPreviewEmail>>,
    { data: PendingLiftshareAccountBatchPreviewRequestOlxgra }
  > = (props) => {
    const { data } = props ?? {}

    return postV2PendingAccountBatchPreviewEmail(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostV2PendingAccountBatchPreviewEmailMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV2PendingAccountBatchPreviewEmail>>
>
export type PostV2PendingAccountBatchPreviewEmailMutationBody =
  PendingLiftshareAccountBatchPreviewRequestOlxgra
export type PostV2PendingAccountBatchPreviewEmailMutationError = unknown

export const usePostV2PendingAccountBatchPreviewEmail = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV2PendingAccountBatchPreviewEmail>>,
    TError,
    { data: PendingLiftshareAccountBatchPreviewRequestOlxgra },
    TContext
  >
}) => {
  const mutationOptions = getPostV2PendingAccountBatchPreviewEmailMutationOptions(options)

  return useMutation(mutationOptions)
}
export const putV2PendingAccountImage = () => {
  return customInstance<AbstractModuleApiResponsePendingLiftshareAccountImageUpsertRequestPendingLiftshareAccountImageUpsertResponsePendingLiftshareAccountImageUpsertResponseQbxtmyy>(
    { url: `/v2/pending-account/image`, method: 'put' }
  )
}

export const getPutV2PendingAccountImageMutationOptions = <
  TError = unknown,
  TVariables = void,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putV2PendingAccountImage>>,
    TError,
    TVariables,
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof putV2PendingAccountImage>>,
  TError,
  TVariables,
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putV2PendingAccountImage>>,
    TVariables
  > = () => {
    return putV2PendingAccountImage()
  }

  return { mutationFn, ...mutationOptions }
}

export type PutV2PendingAccountImageMutationResult = NonNullable<
  Awaited<ReturnType<typeof putV2PendingAccountImage>>
>

export type PutV2PendingAccountImageMutationError = unknown

export const usePutV2PendingAccountImage = <
  TError = unknown,
  TVariables = void,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putV2PendingAccountImage>>,
    TError,
    TVariables,
    TContext
  >
}) => {
  const mutationOptions = getPutV2PendingAccountImageMutationOptions(options)

  return useMutation(mutationOptions)
}
