/**
 * Generated by orval v6.16.0 üç∫
 * Do not edit manually.
 * Mobilityways API
 * OpenAPI spec version: 2.0.0
 */
import { useMutation } from '@tanstack/vue-query';
import type { UseMutationOptions, MutationFunction } from '@tanstack/vue-query';
import type { MaybeRef } from '@tanstack/vue-query/build/lib/types';
import type {
  AbstractModuleApiResponseDashboardSettingsUpdateRequestDashboardSettingsUpdateResponseDashboardSettingsUpdateResponseUlsbya,
  DashboardSettingsUpdateBaseRequestDgtyi,
  AbstractModuleApiResponsePaymentLinkToggleRequestPaymentLinkToggleResponsePaymentLinkToggleResponseRygjcfy,
  PaymentLinkToggleBaseRequestItrrhea,
  AbstractModuleApiResponsePaymentLinkUpdateRequestPaymentLinkUpdateResponsePaymentLinkUpdateResponseMvddpbq,
  PaymentLinkUpdateBaseRequestIlygpi
} from '.././model';
import { customInstance } from '../../../axiosInstance';

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

export const putV2Settings = (
  dashboardSettingsUpdateBaseRequestDgtyi: MaybeRef<DashboardSettingsUpdateBaseRequestDgtyi>
) => {
  return customInstance<AbstractModuleApiResponseDashboardSettingsUpdateRequestDashboardSettingsUpdateResponseDashboardSettingsUpdateResponseUlsbya>(
    {
      url: `/v2/settings`,
      method: 'put',
      headers: { 'Content-Type': 'application/json' },
      data: dashboardSettingsUpdateBaseRequestDgtyi
    }
  );
};

export const getPutV2SettingsMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putV2Settings>>,
    TError,
    { data: DashboardSettingsUpdateBaseRequestDgtyi },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putV2Settings>>,
  TError,
  { data: DashboardSettingsUpdateBaseRequestDgtyi },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putV2Settings>>,
    { data: DashboardSettingsUpdateBaseRequestDgtyi }
  > = (props) => {
    const { data } = props ?? {};

    return putV2Settings(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutV2SettingsMutationResult = NonNullable<Awaited<ReturnType<typeof putV2Settings>>>;
export type PutV2SettingsMutationBody = DashboardSettingsUpdateBaseRequestDgtyi;
export type PutV2SettingsMutationError = unknown;

export const usePutV2Settings = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putV2Settings>>,
    TError,
    { data: DashboardSettingsUpdateBaseRequestDgtyi },
    TContext
  >;
}) => {
  const mutationOptions = getPutV2SettingsMutationOptions(options);

  return useMutation(mutationOptions);
};
export const putV2LiftsharePaymentLinkEnable = (
  paymentLinkToggleBaseRequestItrrhea: MaybeRef<PaymentLinkToggleBaseRequestItrrhea>
) => {
  return customInstance<AbstractModuleApiResponsePaymentLinkToggleRequestPaymentLinkToggleResponsePaymentLinkToggleResponseRygjcfy>(
    {
      url: `/v2/liftshare/payment-link/enable`,
      method: 'put',
      headers: { 'Content-Type': 'application/json' },
      data: paymentLinkToggleBaseRequestItrrhea
    }
  );
};

export const getPutV2LiftsharePaymentLinkEnableMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putV2LiftsharePaymentLinkEnable>>,
    TError,
    { data: PaymentLinkToggleBaseRequestItrrhea },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putV2LiftsharePaymentLinkEnable>>,
  TError,
  { data: PaymentLinkToggleBaseRequestItrrhea },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putV2LiftsharePaymentLinkEnable>>,
    { data: PaymentLinkToggleBaseRequestItrrhea }
  > = (props) => {
    const { data } = props ?? {};

    return putV2LiftsharePaymentLinkEnable(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutV2LiftsharePaymentLinkEnableMutationResult = NonNullable<
  Awaited<ReturnType<typeof putV2LiftsharePaymentLinkEnable>>
>;
export type PutV2LiftsharePaymentLinkEnableMutationBody = PaymentLinkToggleBaseRequestItrrhea;
export type PutV2LiftsharePaymentLinkEnableMutationError = unknown;

export const usePutV2LiftsharePaymentLinkEnable = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putV2LiftsharePaymentLinkEnable>>,
    TError,
    { data: PaymentLinkToggleBaseRequestItrrhea },
    TContext
  >;
}) => {
  const mutationOptions = getPutV2LiftsharePaymentLinkEnableMutationOptions(options);

  return useMutation(mutationOptions);
};
export const putV2LiftsharePaymentLink = (
  paymentLinkUpdateBaseRequestIlygpi: MaybeRef<PaymentLinkUpdateBaseRequestIlygpi>
) => {
  return customInstance<AbstractModuleApiResponsePaymentLinkUpdateRequestPaymentLinkUpdateResponsePaymentLinkUpdateResponseMvddpbq>(
    {
      url: `/v2/liftshare/payment-link`,
      method: 'put',
      headers: { 'Content-Type': 'application/json' },
      data: paymentLinkUpdateBaseRequestIlygpi
    }
  );
};

export const getPutV2LiftsharePaymentLinkMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putV2LiftsharePaymentLink>>,
    TError,
    { data: PaymentLinkUpdateBaseRequestIlygpi },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putV2LiftsharePaymentLink>>,
  TError,
  { data: PaymentLinkUpdateBaseRequestIlygpi },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putV2LiftsharePaymentLink>>,
    { data: PaymentLinkUpdateBaseRequestIlygpi }
  > = (props) => {
    const { data } = props ?? {};

    return putV2LiftsharePaymentLink(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutV2LiftsharePaymentLinkMutationResult = NonNullable<
  Awaited<ReturnType<typeof putV2LiftsharePaymentLink>>
>;
export type PutV2LiftsharePaymentLinkMutationBody = PaymentLinkUpdateBaseRequestIlygpi;
export type PutV2LiftsharePaymentLinkMutationError = unknown;

export const usePutV2LiftsharePaymentLink = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putV2LiftsharePaymentLink>>,
    TError,
    { data: PaymentLinkUpdateBaseRequestIlygpi },
    TContext
  >;
}) => {
  const mutationOptions = getPutV2LiftsharePaymentLinkMutationOptions(options);

  return useMutation(mutationOptions);
};
