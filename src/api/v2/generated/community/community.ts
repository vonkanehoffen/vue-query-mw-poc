/**
 * Generated by orval v6.16.0 üç∫
 * Do not edit manually.
 * Mobilityways API
 * OpenAPI spec version: 2.0.0
 */
import { useQuery, useMutation } from '@tanstack/vue-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  QueryKey,
  UseQueryReturnType
} from '@tanstack/vue-query'
import type { MaybeRef } from '@tanstack/vue-query/build/lib/types'
import type {
  AbstractModuleApiResponseCommunityListRequestCommunityListResponseCommunityListResponseLoiapy,
  AbstractModuleApiResponseCommunityFindByNameRequestCommunityFindByNameResponseCommunityFindByNameResponsePwvxkma,
  CommunityFindByNameBaseRequestQbmaui
} from '.././model'
import { customInstance } from '../../../axiosInstance'

type AwaitedInput<T> = PromiseLike<T> | T

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never

export const getV2Community = (signal?: AbortSignal) => {
  return customInstance<AbstractModuleApiResponseCommunityListRequestCommunityListResponseCommunityListResponseLoiapy>(
    { url: `/v2/community`, method: 'get', signal }
  )
}

export const getGetV2CommunityQueryKey = () => ['v2', 'community'] as const

export const getGetV2CommunityQueryOptions = <
  TData = Awaited<ReturnType<typeof getV2Community>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getV2Community>>, TError, TData>
}): UseQueryOptions<Awaited<ReturnType<typeof getV2Community>>, TError, TData> => {
  const { query: queryOptions } = options ?? {}

  const queryKey = getGetV2CommunityQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getV2Community>>> = ({ signal }) =>
    getV2Community(signal)

  return { queryKey, queryFn, ...queryOptions }
}

export type GetV2CommunityQueryResult = NonNullable<Awaited<ReturnType<typeof getV2Community>>>
export type GetV2CommunityQueryError = unknown

export const useGetV2Community = <
  TData = Awaited<ReturnType<typeof getV2Community>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getV2Community>>, TError, TData>
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetV2CommunityQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey as QueryKey

  return query
}

export const postV2LiftshareCommunitySearchByName = (
  communityFindByNameBaseRequestQbmaui: MaybeRef<CommunityFindByNameBaseRequestQbmaui>
) => {
  return customInstance<AbstractModuleApiResponseCommunityFindByNameRequestCommunityFindByNameResponseCommunityFindByNameResponsePwvxkma>(
    {
      url: `/v2/liftshare/community/search-by-name`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: communityFindByNameBaseRequestQbmaui
    }
  )
}

export const getPostV2LiftshareCommunitySearchByNameMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV2LiftshareCommunitySearchByName>>,
    TError,
    { data: CommunityFindByNameBaseRequestQbmaui },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV2LiftshareCommunitySearchByName>>,
  TError,
  { data: CommunityFindByNameBaseRequestQbmaui },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV2LiftshareCommunitySearchByName>>,
    { data: CommunityFindByNameBaseRequestQbmaui }
  > = (props) => {
    const { data } = props ?? {}

    return postV2LiftshareCommunitySearchByName(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostV2LiftshareCommunitySearchByNameMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV2LiftshareCommunitySearchByName>>
>
export type PostV2LiftshareCommunitySearchByNameMutationBody = CommunityFindByNameBaseRequestQbmaui
export type PostV2LiftshareCommunitySearchByNameMutationError = unknown

export const usePostV2LiftshareCommunitySearchByName = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV2LiftshareCommunitySearchByName>>,
    TError,
    { data: CommunityFindByNameBaseRequestQbmaui },
    TContext
  >
}) => {
  const mutationOptions = getPostV2LiftshareCommunitySearchByNameMutationOptions(options)

  return useMutation(mutationOptions)
}
