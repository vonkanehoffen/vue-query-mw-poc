/**
 * Generated by orval v6.16.0 üç∫
 * Do not edit manually.
 * Mobilityways API
 * OpenAPI spec version: 2.0.0
 */
import { useQuery } from '@tanstack/vue-query'
import type {
  UseQueryOptions,
  QueryFunction,
  QueryKey,
  UseQueryReturnType
} from '@tanstack/vue-query'
import { unref } from 'vue'
import type { MaybeRef } from '@tanstack/vue-query/build/lib/types'
import type {
  AbstractModuleApiResponseCommunityLeaderboardRequestCommunityLeaderboardResponseCommunityLeaderboardResponseXtba,
  GetV2LiftshareGamificationCommunityLeaderboardCommunityIdParams
} from '.././model'
import { customInstance } from '../../../axiosInstance'

type AwaitedInput<T> = PromiseLike<T> | T

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never

export const getV2LiftshareGamificationCommunityLeaderboardCommunityId = (
  communityId: MaybeRef<string>,
  params?: MaybeRef<GetV2LiftshareGamificationCommunityLeaderboardCommunityIdParams>,
  signal?: AbortSignal
) => {
  return customInstance<AbstractModuleApiResponseCommunityLeaderboardRequestCommunityLeaderboardResponseCommunityLeaderboardResponseXtba>(
    {
      url: `/v2/liftshare/gamification/community-leaderboard/${unref(communityId)}`,
      method: 'get',
      params,
      signal
    }
  )
}

export const getGetV2LiftshareGamificationCommunityLeaderboardCommunityIdQueryKey = (
  communityId: MaybeRef<string>,
  params?: MaybeRef<GetV2LiftshareGamificationCommunityLeaderboardCommunityIdParams>
) =>
  [
    'v2',
    'liftshare',
    'gamification',
    'community-leaderboard',
    communityId,
    ...(params ? [params] : [])
  ] as const

export const getGetV2LiftshareGamificationCommunityLeaderboardCommunityIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getV2LiftshareGamificationCommunityLeaderboardCommunityId>>,
  TError = unknown
>(
  communityId: MaybeRef<string>,
  params?: MaybeRef<GetV2LiftshareGamificationCommunityLeaderboardCommunityIdParams>,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getV2LiftshareGamificationCommunityLeaderboardCommunityId>>,
      TError,
      TData
    >
  }
): UseQueryOptions<
  Awaited<ReturnType<typeof getV2LiftshareGamificationCommunityLeaderboardCommunityId>>,
  TError,
  TData
> => {
  const { query: queryOptions } = options ?? {}

  const queryKey = getGetV2LiftshareGamificationCommunityLeaderboardCommunityIdQueryKey(
    communityId,
    params
  )

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getV2LiftshareGamificationCommunityLeaderboardCommunityId>>
  > = ({ signal }) =>
    getV2LiftshareGamificationCommunityLeaderboardCommunityId(communityId, params, signal)

  return { queryKey, queryFn, enabled: !!communityId, ...queryOptions }
}

export type GetV2LiftshareGamificationCommunityLeaderboardCommunityIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV2LiftshareGamificationCommunityLeaderboardCommunityId>>
>
export type GetV2LiftshareGamificationCommunityLeaderboardCommunityIdQueryError = unknown

export const useGetV2LiftshareGamificationCommunityLeaderboardCommunityId = <
  TData = Awaited<ReturnType<typeof getV2LiftshareGamificationCommunityLeaderboardCommunityId>>,
  TError = unknown
>(
  communityId: MaybeRef<string>,
  params?: MaybeRef<GetV2LiftshareGamificationCommunityLeaderboardCommunityIdParams>,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getV2LiftshareGamificationCommunityLeaderboardCommunityId>>,
      TError,
      TData
    >
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetV2LiftshareGamificationCommunityLeaderboardCommunityIdQueryOptions(
    communityId,
    params,
    options
  )

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey as QueryKey

  return query
}
