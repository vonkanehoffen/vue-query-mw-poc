/**
 * Generated by orval v6.16.0 üç∫
 * Do not edit manually.
 * Mobilityways API
 * OpenAPI spec version: 2.0.0
 */
import { useQuery } from '@tanstack/vue-query';
import type {
  UseQueryOptions,
  QueryFunction,
  QueryKey,
  UseQueryReturnType
} from '@tanstack/vue-query';
import type { AbstractModuleApiResponseAcelNationalBreakdownRequestAcelNationalBreakdownResponseAcelNationalBreakdownResponseEftna } from '.././model';
import { customInstance } from '../../../axiosInstance';

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

export const getV2AcelNational = (signal?: AbortSignal) => {
  return customInstance<AbstractModuleApiResponseAcelNationalBreakdownRequestAcelNationalBreakdownResponseAcelNationalBreakdownResponseEftna>(
    { url: `/v2/acel/national`, method: 'get', signal }
  );
};

export const getGetV2AcelNationalQueryKey = () => ['v2', 'acel', 'national'] as const;

export const getGetV2AcelNationalQueryOptions = <
  TData = Awaited<ReturnType<typeof getV2AcelNational>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getV2AcelNational>>, TError, TData>;
}): UseQueryOptions<Awaited<ReturnType<typeof getV2AcelNational>>, TError, TData> => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getGetV2AcelNationalQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getV2AcelNational>>> = ({ signal }) =>
    getV2AcelNational(signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type GetV2AcelNationalQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV2AcelNational>>
>;
export type GetV2AcelNationalQueryError = unknown;

export const useGetV2AcelNational = <
  TData = Awaited<ReturnType<typeof getV2AcelNational>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getV2AcelNational>>, TError, TData>;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetV2AcelNationalQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey as QueryKey;

  return query;
};
