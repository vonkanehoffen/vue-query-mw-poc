/**
 * Generated by orval v6.16.0 üç∫
 * Do not edit manually.
 * Liftshare Client API
 * Private API for Liftshare client and partner integrations.
 * OpenAPI spec version: 1.0.0
 */
import { useQuery } from '@tanstack/vue-query'
import type {
  UseQueryOptions,
  QueryFunction,
  QueryKey,
  UseQueryReturnType
} from '@tanstack/vue-query'
import { unref } from 'vue'
import type { MaybeRef } from '@tanstack/vue-query/build/lib/types'
import type {
  ScanPermitResponseDtoFmtaoq,
  UnauthorizedResultPecray,
  ValidationExceptionResponseBaseDtoVtrnlzi
} from '.././model'
import { customInstance } from '../../../axiosInstance'

type AwaitedInput<T> = PromiseLike<T> | T

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never

/**
 * Allows users with the correct role to get information about parking permit status, and any associated trip authentication and team data.
 * @summary Validate parking permit
 */
export const getPermitScanTeamId = (teamId: MaybeRef<number>, signal?: AbortSignal) => {
  return customInstance<ScanPermitResponseDtoFmtaoq>({
    url: `/permit/scan/${unref(teamId)}`,
    method: 'get',
    signal
  })
}

export const getGetPermitScanTeamIdQueryKey = (teamId: MaybeRef<number>) =>
  ['permit', 'scan', teamId] as const

export const getGetPermitScanTeamIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getPermitScanTeamId>>,
  TError = UnauthorizedResultPecray | ValidationExceptionResponseBaseDtoVtrnlzi
>(
  teamId: MaybeRef<number>,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getPermitScanTeamId>>, TError, TData>
  }
): UseQueryOptions<Awaited<ReturnType<typeof getPermitScanTeamId>>, TError, TData> => {
  const { query: queryOptions } = options ?? {}

  const queryKey = getGetPermitScanTeamIdQueryKey(teamId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPermitScanTeamId>>> = ({ signal }) =>
    getPermitScanTeamId(teamId, signal)

  return { queryKey, queryFn, enabled: !!teamId, ...queryOptions }
}

export type GetPermitScanTeamIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPermitScanTeamId>>
>
export type GetPermitScanTeamIdQueryError =
  | UnauthorizedResultPecray
  | ValidationExceptionResponseBaseDtoVtrnlzi

/**
 * @summary Validate parking permit
 */
export const useGetPermitScanTeamId = <
  TData = Awaited<ReturnType<typeof getPermitScanTeamId>>,
  TError = UnauthorizedResultPecray | ValidationExceptionResponseBaseDtoVtrnlzi
>(
  teamId: MaybeRef<number>,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getPermitScanTeamId>>, TError, TData>
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetPermitScanTeamIdQueryOptions(teamId, options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey as QueryKey

  return query
}
